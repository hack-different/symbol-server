Unable to find file, pid, task or signature matching: -arch=x86_64
WARNING: You currently do not have task_read_for_pid() privileges.
Unable to find file, pid, task or signature matching: -wide
WARNING: You currently do not have task_read_for_pid() privileges.
/System/Library/PrivateFrameworks/SpeechDictionary.framework/Versions/A/SpeechDictionary [arm64e, 0.031587 seconds]:
    C41AA583-454B-3A48-BBB5-B3402FC88B3B /System/Library/PrivateFrameworks/SpeechDictionary.framework/Versions/A/SpeechDictionary [DYLIB, DYLDSHAREDCACHE, FaultedFromDiskDyldSharedCache, MMap64]  
        0x0000000212dda000 ( 0x83ff8) __TEXT SEGMENT
            0x0000000212dda000 (  0x12dc) MACH_HEADER
            0x0000000212ddb2dc ( 0x6b04c) __TEXT __text
                0x0000000212ddb2dc (     0xc) SLGetSpeechDictionaryBundle() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb2e8 (    0x30) SLMappedFileDict::SetMappedFile(__CFURL const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb318 (    0xb0) SLMMapCache::Map(__CFURL const*, SLMMapHint*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb3c8 (   0x1d4) SLMMapCache::Map(char const*, SLMMapHint*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb59c (    0x2c) SLDictionary::SLDictionary() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb5c8 (    0x18) SLEncyclopedia::PushFront(SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb5e0 (    0x24) SLEncyclopedia::PushBack(SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb604 (    0x20) SLWordBuilder::SLWordBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb624 (   0x1a4) SLCartDict::SLCartDict(void*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb7c8 (    0xbc) SLCartDict::SymtabRead(char*&, SLCartDict::Symtab*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb884 (    0x1c) SLDictionary::SmartSwapFloat32Value(float) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb8a0 (    0x98) SLMMapCache::Unmap(void*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb938 (     0x4) SLMorphRules::~SLMorphRules() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb93c (    0x8c) SLEncyclopedia::~SLEncyclopedia() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb9c8 (     0x4) SLMorph_Apostrophe::~SLMorph_Apostrophe() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb9cc (     0x4) SLMorph::~SLMorph() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb9d0 (     0x4) SLTionRules::~SLTionRules() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb9d4 (     0x4) SLFlatMorphRules::~SLFlatMorphRules() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb9d8 (     0x4) SLAgglomerate::~SLAgglomerate() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddb9dc (    0xa8) SLSplitCartDict::~SLSplitCartDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddba84 (    0x30) SLCartDict::Symtab::~Symtab() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddbab4 (     0x4) SLCartDict::SLCartDict(void*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddbab8 (    0x74) SLCartDict::~SLCartDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddbb2c (     0x4) SLCartDict::~SLCartDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddbb30 (    0x28) SLCartDict::~SLCartDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddbb58 (    0x30) SLCartDict::Symtab::~Symtab() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddbb88 (   0x4d0) SLCartDict::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc058 (   0x258) SLCartDict::LTGenResultRaw(char const*, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc2b0 (    0x80) SLCartDict::LTCleanupLabels() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc330 (    0xbc) SLCartDict::LTGenLabelConfusions(SLCartDict::Tree const&, char*, SLCartDict::Symtab const&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc3ec (    0x50) SLCartDictEng::SLCartDictEng(__CFURL const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc43c (    0x7c) SLCartMappedFileDict::SLCartMappedFileDict(__CFURL const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc4b8 (    0x50) SLCartDictEng::SLCartDictEng(__CFURL const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc508 (    0x28) SLCartDictEng::VowelQuality(unsigned char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc530 (    0x1c) SLCartDictEng::PimpMySchwa(unsigned char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc54c (    0xac) SLCartDict::Create(__CFLocale const*, __CFURL const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc5f8 (     0x8) SLCartDict::VowelQuality(unsigned char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc600 (     0x8) SLCartDict::PimpMySchwa(unsigned char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc608 (     0x4) SLCartDictEng::~SLCartDictEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc60c (    0x28) SLCartDictEng::~SLCartDictEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc634 (    0x18) std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc64c (    0x5c) std::__1::__throw_length_error[abi:v160006](char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc6a8 (    0x34) std::length_error::length_error[abi:v160006](char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc6dc (    0xd4) SLCompressedDict::CompareEntry(char const*, unsigned long, unsigned char*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7b0 (     0x8) SLCompressedDict::EntryLength(unsigned char*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7b8 (     0x4) SLCompressedDict::~SLCompressedDict() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7bc (    0x28) SLCompressedDict::~SLCompressedDict() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7e4 (     0x4) SLWordBuilder::SetDictionary(char const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7e8 (     0x4) SLWordBuilder::BeginWord() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7ec (     0x4) SLWordBuilder::SetText(char const*, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7f0 (     0x4) SLWordBuilder::SetBoundary(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7f4 (     0x4) SLWordBuilder::SetEmphasis(char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7f8 (     0x4) SLWordBuilder::SetPosition(unsigned long, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc7fc (     0x4) SLWordBuilder::EndWord() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc800 (     0xc) SLWordBuilder::BeginHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc80c (     0xc) SLWordBuilder::BeginSyllable() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc818 (     0x4) SLWordBuilder::AddPhoneme(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc81c (    0x70) SLWordBuilder::AddPhonemes(unsigned char const*, int) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc88c (     0x4) SLWordBuilder::SetTags(SLWordTagSet const&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc890 (    0x18) SLWordBuilder::AddPartOfSpeech(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc8a8 (     0x8) SLWordBuilder::SetPartOfSpeech(unsigned int) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc8b0 (     0x4) SLWordBuilder::EndHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc8b4 (    0x20) SLWordBuilder::SLWordBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc8d4 (     0x4) SLWordBuilder::~SLWordBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc8d8 (     0x4) SLWordBuilder::~SLWordBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc8dc (     0x4) SLWordBuilder::~SLWordBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc8e0 (    0x28) SLWordBuilderProxy::SetDictionary(char const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc908 (    0x28) SLWordBuilderProxy::BeginWord() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc930 (    0x28) SLWordBuilderProxy::SetText(char const*, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc958 (    0x28) SLWordBuilderProxy::SetBoundary(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc980 (    0x28) SLWordBuilderProxy::SetEmphasis(char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc9a8 (    0x28) SLWordBuilderProxy::SetPosition(unsigned long, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc9d0 (    0x28) SLWordBuilderProxy::EndWord() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddc9f8 (    0x30) SLWordBuilderProxy::BeginHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddca28 (    0x28) SLWordBuilderProxy::BeginSyllable() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddca50 (    0x28) SLWordBuilderProxy::AddPhoneme(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddca78 (    0x28) SLWordBuilderProxy::AddPhonemes(unsigned char const*, int) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcaa0 (    0x28) SLWordBuilderProxy::SetTags(SLWordTagSet const&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcac8 (    0x34) SLWordBuilderProxy::EndHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcafc (    0x50) SLWordBuilderPhonemeProxy::AddPhoneme(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcb4c (    0x68) SLWordBuilderPhonemeProxy::AddPhonemes(unsigned char const*, int) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcbb4 (     0x4) SLDictionary::~SLDictionary() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcbb8 (     0x4) SLDictionary::~SLDictionary() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcbbc (     0x4) SLDictionary::~SLDictionary() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcbc0 (    0x90) SLEncyclopedia::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcc50 (    0x60) SLEncyclopedia::Remove(SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddccb0 (     0x4) SLEncyclopedia::~SLEncyclopedia() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddccb4 (    0x28) SLEncyclopedia::~SLEncyclopedia() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddccdc (    0x30) SLDictionaryRecursion::SLDictionaryRecursion(SLDictionary*, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcd0c (    0x30) SLDictionaryRecursion::SLDictionaryRecursion(SLDictionary*, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcd3c (    0x6c) SLDictionaryRecursion::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcda8 (     0x8) SLWordBuilder::WrappedToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcdb0 (     0x8) SLWordBuilder::AllowShortcut() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcdb8 (     0x4) SLWordBuilderProxy::~SLWordBuilderProxy() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcdbc (     0x4) SLWordBuilderProxy::~SLWordBuilderProxy() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcdc0 (     0x4) SLWordBuilderPhonemeProxy::~SLWordBuilderPhonemeProxy() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcdc4 (     0x4) SLWordBuilderPhonemeProxy::~SLWordBuilderPhonemeProxy() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcdc8 (     0x4) SLDictionaryRecursion::~SLDictionaryRecursion() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcdcc (     0x4) SLDictionaryRecursion::~SLDictionaryRecursion() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcdd0 (    0x38) SLHandleDict::SetHandle(char**) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddce08 (     0x4) SLHandleDict::~SLHandleDict() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddce0c (     0x4) SLHandleDict::~SLHandleDict() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddce10 (    0x30) SLMappedFileDict::~SLMappedFileDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddce40 (     0xc) __clang_call_terminate [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddce4c (    0x30) SLMappedFileDict::~SLMappedFileDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddce7c (    0x34) SLCartMappedFileDict::~SLCartMappedFileDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddceb0 (     0x4) SLCartMappedFileDict::~SLCartMappedFileDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddceb4 (    0x28) SLCartMappedFileDict::~SLCartMappedFileDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcedc (    0x40) SLPrefixMappedFileDict::~SLPrefixMappedFileDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcf1c (     0x4) SLPrefixMappedFileDict::~SLPrefixMappedFileDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcf20 (    0x28) SLPrefixMappedFileDict::~SLPrefixMappedFileDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddcf48 (    0xc4) SLPrefixMappedFileDict::SLPrefixMappedFileDict(__CFURL const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd00c (     0x4) SLPrefixDictMapHint::~SLPrefixDictMapHint() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd010 (     0x4) SLPrefixMappedFileDict::SLPrefixMappedFileDict(__CFURL const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd014 (     0x8) SLPrefixDictMapHint::MappedSize() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd01c (    0x28) SLPrefixDictMapHint::~SLPrefixDictMapHint() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd044 (    0x38) SLMorphTraits::SLMorphTraits(char const*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd07c (    0x38) SLMorphTraits::SLMorphTraits(char const*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd0b4 (    0x30) SLMorphTraits::~SLMorphTraits() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd0e4 (    0x30) SLMorphTraits::~SLMorphTraits() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd114 (    0xa4) SLMorph::SLMorph(char const*, SLPhonemes const&, SLMorphTraits const*, unsigned int, unsigned int, SLWordTagSet) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd1b8 (    0xa4) SLMorph::SLMorph(char const*, SLPhonemes const&, SLMorphTraits const*, unsigned int, unsigned int, SLWordTagSet) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd25c (   0x12c) SLMorph::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd388 (    0x68) SLMorph::Match(char const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd3f0 (   0x150) SLMorph::MarkAllCaps(SLTokenBuilder*, int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd540 (    0x94) SLMorph::RestoreSuffix(SLTokenBuilder*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd5d4 (    0xbc) SLMorph::RestoreSuffix(SLTokenBuilder*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd690 (   0x12c) SLMorph::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd7bc (   0x138) SLMorph::POSFromSuffix(SLToken*, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd8f4 (    0x70) SLMorph::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddd964 (   0x224) std::__1::__wrap_iter<unsigned char*> std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::insert<unsigned char const*, 0>(std::__1::__wrap_iter<unsigned char const*>, unsigned char const*, unsigned char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddb88 (    0x50) SLMorph::PrefixMatch(char const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddbd8 (   0x164) SLMorph::PrefixMorphLookup(char const*, unsigned long, bool, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddd3c (    0x70) SLMorph::PrefixAddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddddac (    0xa0) SLMorph_Apostrophe::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddde4c (    0x5c) SLMorphRules::Create(__CFLocale const*, bool) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddea8 (    0x64) SLMorphRules::CreateFlat(__CFLocale const*, SLDictionary*, bool) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddf0c (     0x4) SLMorphRules::~SLMorphRules() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddf10 (    0x28) SLMorphRules::~SLMorphRules() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddf38 (    0x90) SLFlatMorphRules::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddfc8 (     0x4) SLFlatMorphRules::~SLFlatMorphRules() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddfcc (    0x28) SLFlatMorphRules::~SLFlatMorphRules() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dddff4 (    0x28) SLMorph::~SLMorph() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde01c (    0x28) SLMorph::POSFromSuffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde044 (    0x28) SLMorph_Apostrophe::~SLMorph_Apostrophe() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde06c (    0x98) std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_string[abi:v160006](char const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde104 (    0x18) std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde11c (    0x58) SLUncompressedDict::CompareEntry(char const*, unsigned long, unsigned char*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde174 (     0xc) SLUncompressedDict::EntryLength(unsigned char*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde180 (   0x150) SLUncompressedDict::FindEntry(char const*, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde2d0 (    0xa4) SLUncompressedDict::ExtractPOS(int, SLWordBuilder*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde374 (   0x140) SLUncompressedDict::ExtractHomograph(unsigned char*, SLWordBuilder*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde4b4 (   0x1d0) SLUncompressedDict::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde684 (     0x4) SLUncompressedDict::~SLUncompressedDict() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde688 (    0x28) SLUncompressedDict::~SLUncompressedDict() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde6b0 (    0x5c) SLPronouncer::Create(__CFLocale const*, SLDictLookup const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde70c (     0x4) SLPronouncer::~SLPronouncer() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde710 (     0x4) SLPronouncer::~SLPronouncer() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde714 (     0x4) SLPronouncer::~SLPronouncer() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde718 (    0x34) SLPronouncerImpl::MakePluralUnit(SLToken*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde74c (   0x20c) SLPronouncerImpl::AppendUnit(SLSymbol const*, SLTokenList&, bool, CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dde958 (   0x18c) SLPronouncerImpl::AppendUnitModifier(SLSymbol const*, char, bool, SLTokenList&, CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddeae4 (    0xc8) SLPronouncerImpl::SymbolLookup(SLPronouncerImpl::Lookup const*, unsigned long, char const*) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddebac (   0x39c) SLPronouncerImpl::AppendSymbol(SLSymbol const*, SLTokenList&, long, long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddef48 (   0x234) SLPronouncerImpl::AppendAccentedCharacterSpelling(unsigned short, SLTokenList&, long, long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddf17c (    0x1c) (null) [FUNC, FunctionStarts] 
                0x0000000212ddf198 (   0x2bc) SLPronouncerImpl::AppendCharacterSpelling(unsigned short, SLTokenList&, long, long, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddf454 (     0x4) SLPronouncerImpl::AppendUnknownCharacterSpelling(unsigned short, SLTokenList&, long, long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddf458 (   0x258) SLPronouncerImpl::PronounceCharByChar(SLToken*, SLTokenList&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddf6b0 (   0x37c) SLPronouncerImpl::PronouncePhoneNumber(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ddfa2c (   0x7f8) SLPronouncerImpl::PronounceWordByWord(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de0224 (   0xa9c) SLPronouncerImpl::PronounceURL(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de0cc0 (   0x274) SLPronouncerImpl::IsURLDomain(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, unsigned short, unsigned short, SLSymbol const**) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de0f34 (    0x78) std::__1::list<SLToken*, std::__1::allocator<SLToken*>>::splice(std::__1::__list_const_iterator<SLToken*, void*>, std::__1::list<SLToken*, std::__1::allocator<SLToken*>>&, std::__1::__list_const_iterator<SLToken*, void*>, std::__1::__list_const_iterator<SLToken*, void*>) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de0fac (   0x110) SLPronouncerImpl::PronounceURLSymbol(unsigned short, SLTokenList&, long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de10bc (   0x5ac) SLPronouncerImpl::PronounceNumber(SLToken*, SLTokenList&, SLDissecter::NumInfo const&, unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de1668 (   0x194) SLPronouncerImpl::PronounceFraction(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de17fc (   0x590) SLPronouncerImpl::PronounceRoman(SLToken*, CFRange, unsigned long, SLTokenList&, unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de1d8c (   0xac4) SLPronouncerImpl::PronounceInteger(SLToken*, CFRange, SLTokenList&, unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de2850 (    0x10) (null) [FUNC, FunctionStarts] 
                0x0000000212de2860 (    0x10) (null) [FUNC, FunctionStarts] 
                0x0000000212de2870 (    0xb0) SLPronouncerImpl::PronounceOneDigit(char, long, SLTokenList&, unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de2920 (   0x200) SLPronouncerImpl::PronounceTwoDigits(char, char, long, SLTokenList&, unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de2b20 (   0x2a0) SLPronouncerImpl::PronounceThreeDigits(char, char, char, long, SLTokenList&, unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de2dc0 (   0x248) SLPronouncerImpl::PronounceDigits(SLToken*, CFRange, SLTokenList&, unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de3008 (   0x460) SLPronouncerImpl::PronounceMoney(SLSymbol const*, SLToken*, SLToken*, SLDissecter::NumInfo&, SLSymbol const*, CFRange, SLTokenCapitalization, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de3468 (   0x358) SLPronouncerImpl::PronounceYear(SLToken*, SLTokenList&, CFRange, unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de37c0 (   0x1bc) SLPronouncerImpl::PronounceDate(SLToken*, SLTokenList&, SLDissecter::DateInfo const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de397c (   0x2cc) SLPronouncerImpl::PronounceTime(SLToken*, SLTokenList&, SLDissecter::TimeInfo const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de3c48 (   0x29c) SLPronouncerImpl::PronounceElapsedTime(SLToken*, SLTokenList&, SLDissecter::TimeInfo const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de3ee4 (   0x1a0) SLPronouncerImpl::PronounceNumericPair(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4084 (   0x190) SLPronouncerImpl::PronounceDimensions(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4214 (   0x184) SLPronouncerImpl::PronounceLegalSection(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4398 (   0x324) SLPronouncerImpl::PronounceGeoLoc(SLToken*, SLTokenList&, SLDissecter::GeoLocInfo const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de46bc (   0x230) SLPronouncerImpl::PronounceDottedNumber(SLToken*, SLTokenList&, SLDissecter::DottedNumberInfo const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de48ec (     0x8) SLPronouncerImpl::HasApostropheS() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de48f4 (     0x4) SLPronouncerImpl::MakePlural(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de48f8 (     0x4) SLPronouncerImpl::MakePossessive(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de48fc (     0x8) SLPronouncerImpl::MonthBeforeDay() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4904 (     0x8) SLPronouncerImpl::ExponentIsOrdinal() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de490c (    0x64) std::__1::__list_imp<SLToken*, std::__1::allocator<SLToken*>>::clear() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4970 (    0x18) std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4988 (    0x34) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<unsigned short>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<unsigned short>>(std::__1::allocator<unsigned short>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de49bc (    0x34) std::__throw_bad_array_new_length[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de49f0 (    0xa0) std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_string[abi:v160006]<std::nullptr_t>(char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4a90 (   0x1f8) SLSplitCartDict::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4c88 (     0x4) SLSplitCartDict::~SLSplitCartDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4c8c (    0x28) SLSplitCartDict::~SLSplitCartDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4cb4 (    0x18) std::__1::vector<SLHomograph*, std::__1::allocator<SLHomograph*>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4ccc (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<SLHomograph*>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<SLHomograph*>>(std::__1::allocator<SLHomograph*>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4d04 (    0xfc) SLPrefixDict::SLPDFindPage(SLPDHeader const*, char const*, unsigned char const*, unsigned long, unsigned long&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4e00 (   0x130) SLPrefixDict::SetFileInfo(void*, int, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4f30 (    0x64) SLPrefixDict::~SLPrefixDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4f94 (     0x4) SLPrefixDict::~SLPrefixDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4f98 (    0x28) SLPrefixDict::~SLPrefixDict() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de4fc0 (    0xa8) SLPrefixDict::Decoder::DecodePhoneme(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5068 (    0x38) SLPrefixDict::Decoder::DecodePhonemes(unsigned char const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de50a0 (   0x2e4) SLPrefixDict::Decoder::FoundWord(char const*, unsigned long, unsigned char const*, unsigned char const*, unsigned short const*, unsigned int const*, unsigned short const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5384 (   0x180) SLPrefixDict::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5504 (     0x8) SLMMapHint::MappedSize() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de550c (     0x4) SLMMapHint::~SLMMapHint() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5510 (     0x4) SLMMapHint::~SLMMapHint() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5514 (     0x4) SLMMapHint::~SLMMapHint() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5518 (    0x98) SLMMapCache::IsFileAlreadyMapped(char const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de55b0 (    0x64) SLTuples::Create(SLLexer*, __CFLocale const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5614 (   0x12c) SLTuplesImpl::SLTuplesImpl(SLLexer*, __CFString const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5740 (   0x148) SLTuplesImpl::HasTupleDB() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5888 (    0x88) SLTuplesImpl::TupleLookup(char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5910 (   0x250) SLTuplesImpl::AbstractTupleLookup(char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5b60 (    0xcc) SLTuplesImpl::~SLTuplesImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5c2c (     0x4) SLTuplesImpl::~SLTuplesImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5c30 (     0x4) non-virtual thunk to SLTuplesImpl::~SLTuplesImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5c34 (     0x4) SLTuplesImpl::~SLTuplesImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5c38 (     0x4) non-virtual thunk to SLTuplesImpl::~SLTuplesImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de5c3c (   0xf28) SLTuplesImpl::NextToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6b64 (    0x80) std::__1::list<SLTupleHypothesis, std::__1::allocator<SLTupleHypothesis>>::push_back(SLTupleHypothesis const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6be4 (    0xd0) SLTuplesImpl::TokenContext(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6cb4 (    0x5c) std::__1::list<SLTupleHypothesis, std::__1::allocator<SLTupleHypothesis>>::pop_front() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6d10 (    0x78) SLLexerBuffer::clear() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6d88 (    0xc0) SLTuplesImpl::HasTuple(char const*, ...) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6e48 (    0x28) SLTuplesImpl::LexerBehavior() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6e70 (    0x28) SLTuplesImpl::SetLexerBehavior(unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6e98 (    0x28) SLTuplesImpl::SetDelim(unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6ec0 (    0x28) SLTuplesImpl::Delim() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6ee8 (    0x28) SLTuplesImpl::SetErrorHandler(void (long) block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6f10 (     0x8) SLTuples::HasTuple(char const*, ...) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6f18 (    0x7c) std::__1::__list_imp<SLTupleHypothesis, std::__1::allocator<SLTupleHypothesis>>::clear() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6f94 (    0x68) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::__maybe_remove_front_spare[abi:v160006](bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de6ffc (    0x3c) std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7038 (    0x54) std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__destroy_vector::operator()[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de708c (    0x58) std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__clear[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de70e4 (    0x78) std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__swap_out_circular_buffer(std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de715c (    0x18) std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7174 (    0x48) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de71bc (    0xa0) std::__1::reverse_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*> std::__1::__uninitialized_allocator_move_if_noexcept[abi:v160006]<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::reverse_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>, std::__1::reverse_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>, std::__1::reverse_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>>(std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&, std::__1::reverse_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>, std::__1::reverse_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1:...
                0x0000000212de725c (    0x38) std::__1::__exception_guard_exceptions<std::__1::_AllocatorDestroyRangeReverse<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::reverse_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>>>::~__exception_guard_exceptions[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7294 (    0x48) std::__1::_AllocatorDestroyRangeReverse<std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::reverse_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>>::operator()[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de72dc (    0x38) std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>::~__split_buffer() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7314 (    0x58) std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>::__destruct_at_end[abi:v160006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de736c (     0x8) std::__1::vector<void const*, std::__1::allocator<void const*>>::__destroy_vector::__destroy_vector(std::__1::vector<void const*, std::__1::allocator<void const*>>&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7374 (     0x8) std::__1::vector<void const*, std::__1::allocator<void const*>>::__destroy_vector::__destroy_vector(std::__1::vector<void const*, std::__1::allocator<void const*>>&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de737c (    0x3c) SLToken::SLToken(unsigned char, unsigned int) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de73b8 (    0x3c) SLToken::SLToken(unsigned char, unsigned int) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de73f4 (    0x4c) SLToken::~SLToken() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7440 (    0x54) SLToken::clear() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7494 (     0x4) SLToken::~SLToken() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7498 (     0x4) SLHomograph::~SLHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de749c (    0x14) SLToken::SetType(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de74b0 (    0xd8) SLToken::ChooseHomograph(SLHomograph*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7588 (   0x190) SLToken::SelectHomographs(unsigned int, SLWordTagSet const&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7718 (    0x2c) std::__1::vector<SLHomograph*, std::__1::allocator<SLHomograph*>>::resize(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7744 (    0xdc) SLToken::ExcludeHomographs(SLWordTagSet const&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7820 (    0x6c) SLToken::HasTag(unsigned short) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de788c (    0x68) SLToken::HasPOS(unsigned int) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de78f4 (   0x33c) SLToken::SetText(char const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7c30 (    0x7c) SLToken::AppendToken(SLToken*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7cac (   0x1f0) std::__1::__wrap_iter<unsigned short*> std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::insert<std::__1::__wrap_iter<unsigned short*>, 0>(std::__1::__wrap_iter<unsigned short const*>, std::__1::__wrap_iter<unsigned short*>, std::__1::__wrap_iter<unsigned short*>) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7e9c (   0x110) SLToken::SetTokenRange(SLToken*, CFRange) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de7fac (   0x10c) void std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::assign<std::__1::__wrap_iter<unsigned short*>, 0>(std::__1::__wrap_iter<unsigned short*>, std::__1::__wrap_iter<unsigned short*>) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de80b8 (    0x58) SLToken::RemoveRange(CFRange) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8110 (    0x60) SLToken::TransferTokenRange(SLToken*, CFRange) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8170 (    0x94) SLToken::Capitalization() const [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8204 (    0x44) SLToken::SetCapitalization(SLTokenCapitalization) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8248 (    0x10) SLToken::TypeName(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8258 (    0x10) SLToken::FlagName(unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8268 (    0x10) SLPhonTune::SLPhonTune() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8278 (    0x10) SLPhonTune::SLPhonTune() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8288 (    0x20) SLHomograph::SLHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de82a8 (    0x20) SLHomograph::SLHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de82c8 (    0x4c) SLHomograph::~SLHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8314 (    0x54) SLTokenCreateTemp [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8368 (   0x900) SLTokenCreateFromBuffer [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8c68 (   0x1f8) std::__1::__wrap_iter<SLHomograph**> std::__1::vector<SLHomograph*, std::__1::allocator<SLHomograph*>>::insert<std::__1::__wrap_iter<SLHomograph**>, 0>(std::__1::__wrap_iter<SLHomograph* const*>, std::__1::__wrap_iter<SLHomograph**>, std::__1::__wrap_iter<SLHomograph**>) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8e60 (    0x64) SLTokenGetText [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de8ec4 (   0x1ec) std::__1::__wrap_iter<unsigned char*> std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::insert<std::__1::__wrap_iter<unsigned char const*>, 0>(std::__1::__wrap_iter<unsigned char const*>, std::__1::__wrap_iter<unsigned char const*>, std::__1::__wrap_iter<unsigned char const*>) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de90b0 (    0x3c) SLTokenAddHomographs [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de90ec (    0x30) SLTokenRelease [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de911c (    0x90) SLTokenGetClass [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de91ac (    0x44) (null) [FUNC, FunctionStarts] 
                0x0000000212de91f0 (   0x1d0) SLTokenGetInfo [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de93c0 (    0x14) SLTokenGetTupleGroup [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de93d4 (    0x10) SLTokenCountHomographs [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de93e4 (     0xc) SLTokenGetHomograph [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de93f0 (     0x8) SLHomographGetPOS [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de93f8 (    0x10) SLHomographGetTags [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9408 (    0x44) SLHomographGetPhonemes [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de944c (    0x10) SLTokenList::SLTokenList() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de945c (    0x10) SLTokenList::SLTokenList() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de946c (    0x6c) SLTokenList::push_back(SLToken*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de94d8 (   0x380) SLHomographCopyTune [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9858 (    0x44) SLCFDictionaryBuilder::~SLCFDictionaryBuilder() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de989c (   0x114) std::__1::vector<SLHomograph*, std::__1::allocator<SLHomograph*>>::__append(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de99b0 (    0x40) std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::__vallocate[abi:v160006](unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de99f0 (    0x3c) std::__1::vector<SLPhonTune, std::__1::allocator<SLPhonTune>>::~vector[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9a2c (    0x54) std::__1::vector<SLPhonTune, std::__1::allocator<SLPhonTune>>::__destroy_vector::operator()[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9a80 (    0x58) std::__1::vector<SLPhonTune, std::__1::allocator<SLPhonTune>>::__clear[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9ad8 (   0x104) void std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::assign<unsigned char*, 0>(unsigned char*, unsigned char*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9bdc (    0x44) std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::__vallocate[abi:v160006](unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9c20 (    0x18) std::__1::vector<void const*, std::__1::allocator<void const*>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9c38 (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<void const*>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<void const*>>(std::__1::allocator<void const*>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9c70 (    0x18) SLFirstPOSInSet(unsigned int) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9c88 (    0x2c) SLTag::Name(unsigned short) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9cb4 (    0x30) SLWordTagSet::find(unsigned short) const [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9ce4 (    0x44) SLWordTagSet::erase(unsigned short) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9d28 (    0x68) operator+=(SLWordTagSet&, SLWordTagSet const&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9d90 (     0x4) SLElementNames::~SLElementNames() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9d94 (     0x4) SLElementNames::~SLElementNames() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9d98 (     0x4) SLElementNames::~SLElementNames() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9d9c (    0x4c) SLElementNames::Create(__CFLocale const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9de8 (    0x2c) SLElementNames::PhonName(unsigned char) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9e14 (    0x2c) SLElementNames::PhonText(unsigned char) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9e40 (    0x1c) SLElementNames::POSName(unsigned char) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9e5c (    0x2c) SLElementNames::TagName(unsigned short) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9e88 (    0x10) SLElementNames::BndName(unsigned char) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9e98 (    0x10) SLElementNames::EmphName(unsigned char) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9ea8 (     0x4) SLTextSource::~SLTextSource() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9eac (     0x4) SLTextSource::~SLTextSource() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9eb0 (     0x4) SLTextSource::~SLTextSource() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9eb4 (    0x5c) SLCFStringTextSource::SLCFStringTextSource(__CFString const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9f10 (    0x5c) SLCFStringTextSource::SLCFStringTextSource(__CFString const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9f6c (     0x8) SLCFStringTextSource::CreateMoreText() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9f74 (    0x50) SLCFStringTextSource::~SLCFStringTextSource() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9fc4 (     0x4) SLCFStringTextSource::~SLCFStringTextSource() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9fc8 (    0x28) SLCFStringTextSource::~SLCFStringTextSource() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212de9ff0 (   0x2a8) SLCFStringTextSource::Refill(unsigned short*&, unsigned short*&, unsigned short const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea298 (    0x20) SLTokenTextSource::SLTokenTextSource(SLToken*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea2b8 (    0x20) SLTokenTextSource::SLTokenTextSource(SLToken*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea2d8 (    0x28) SLTokenTextSource::Refill(unsigned short*&, unsigned short*&, unsigned short const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea300 (    0x48) SLLexerInstance::SLLexerInstance(SLTextSource*, int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea348 (     0x4) SLLexer::~SLLexer() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea34c (    0x94) SLLexerInstance::Refill(int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea3e0 (    0x28) SLLexerInstance::CreateToken(unsigned char, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea408 (    0x60) SLLexerInstance::CreateToken(unsigned char, unsigned int, char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea468 (   0x1e4) SLToken* SLLexerInstance::CreateToken<char>(unsigned char, unsigned int, char const*, char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea64c (    0x30) SLLexerInstance::CreateToken(unsigned char, unsigned int, unsigned short) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea67c (   0x1e4) SLToken* SLLexerInstance::CreateToken<unsigned short>(unsigned char, unsigned int, unsigned short const*, unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea860 (    0x34) SLLexerInstance::CreateCommandToken(unsigned int, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea894 (    0x38) SLLexerImpl::CreateBehaviorToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea8cc (    0x5c) SLLexerImpl::SLLexerImpl(SLTextSource*, SLPhonemeParser*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea928 (    0x5c) SLLexerImpl::SLLexerImpl(SLTextSource*, SLPhonemeParser*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dea984 (    0x7c) SLLexerImpl::~SLLexerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deaa00 (     0x4) SLLexerImpl::~SLLexerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deaa04 (    0x28) SLLexerImpl::~SLLexerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deaa2c (    0x10) SLLexerImpl::SetDelim(unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deaa3c (    0x3c) SLLexerImpl::SetErrorHandler(void (long) block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deaa78 (    0x34) SLLexerImpl::Error() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deaaac (    0xa8) SLLexerImpl::SpaceDelimitedToken(unsigned short*, unsigned short*, unsigned int*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deab54 (    0x34) SLLexerBuffer::SLLexerBuffer(SLLexer*, bool) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deab88 (    0x34) SLLexerBuffer::SLLexerBuffer(SLLexer*, bool) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deabbc (    0xdc) SLLexerBuffer::~SLLexerBuffer() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deac98 (     0x4) SLLexerBuffer::~SLLexerBuffer() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deac9c (    0x28) SLLexerBuffer::~SLLexerBuffer() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deacc4 (    0x44) SLLexerBuffer::push_front(SLTokenList const&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dead08 (   0x580) std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l> std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::insert<std::__1::__list_const_iterator<SLToken*, void*>>(std::__1::__deque_iterator<SLToken*, SLToken* const*, SLToken* const&, SLToken* const* const*, long, 512l>, std::__1::__list_const_iterator<SLToken*, void*>, std::__1::__list_const_iterator<SLToken*, void*>, std::__1::enable_if<__is_cpp17_bidirectional_iterator<std::__1::__list_const_iterator<SLToken*, void*>>::value, void>::type*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb288 (   0x108) SLLexerBuffer::operator[](unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb390 (    0x80) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::push_back(SLToken* const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb410 (    0x80) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::push_back(SLToken*&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb490 (   0x148) SLLexer::Create(SLTextSource*, SLDictLookup*, SLPronouncer*, __CFLocale const*, unsigned int) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb5d8 (     0x4) SLLexer::~SLLexer() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb5dc (     0x4) SLLexer::~SLLexer() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb5e0 (     0x4) SLTokenTextSource::~SLTokenTextSource() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb5e4 (     0x4) SLTokenTextSource::~SLTokenTextSource() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb5e8 (     0x8) SLLexerImpl::LexerBehavior() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb5f0 (     0x8) SLLexerImpl::SetLexerBehavior(unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb5f8 (     0x8) SLLexerImpl::Delim() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb600 (    0x28) SLLexerChain::NextToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb628 (    0x28) SLLexerChain::LexerBehavior() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb650 (    0x28) SLLexerChain::SetLexerBehavior(unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb678 (    0x28) SLLexerChain::SetDelim(unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb6a0 (    0x28) SLLexerChain::Delim() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb6c8 (    0x28) SLLexerChain::SetErrorHandler(void (long) block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb6f0 (    0x6c) SLLexerChain::~SLLexerChain() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb75c (    0x7c) SLLexerChain::~SLLexerChain() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb7d8 (   0x114) void std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::assign<unsigned short const*, 0>(unsigned short const*, unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb8ec (   0x100) void std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::assign<char const*, 0>(char const*, char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deb9ec (    0xa8) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::~deque[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deba94 (    0x50) std::__1::__split_buffer<SLToken**, std::__1::allocator<SLToken**>>::~__split_buffer() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212debae4 (   0x4b8) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::__add_front_capacity(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212debf9c (    0x6c) std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>::operator+[abi:v160006](long) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dec008 (   0x574) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::__add_back_capacity(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dec57c (    0x70) std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>::operator-[abi:v160006](long) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dec5ec (   0x120) std::__1::__split_buffer<SLToken**, std::__1::allocator<SLToken**>>::push_front(SLToken** const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dec70c (   0x120) std::__1::__split_buffer<SLToken**, std::__1::allocator<SLToken**>>::push_front(SLToken**&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dec82c (   0x108) std::__1::__split_buffer<SLToken**, std::__1::allocator<SLToken**>>::push_back(SLToken**&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dec934 (   0x108) std::__1::__split_buffer<SLToken**, std::__1::allocator<SLToken**>&>::push_back(SLToken**&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deca3c (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<SLToken**>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<SLToken**>>(std::__1::allocator<SLToken**>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deca74 (    0xc4) std::__1::pair<std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>> std::__1::__move_loop<std::__1::_ClassicAlgPolicy>::operator()[abi:v160006]<std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, 0>(std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212decb38 (    0xe4) std::__1::pair<SLToken**, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>> std::__1::__move_loop<std::__1::_ClassicAlgPolicy>::operator()[abi:v160006]<SLToken**, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, 0>(SLToken**, SLToken**, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212decc1c (   0x11c) std::__1::__split_buffer<SLToken**, std::__1::allocator<SLToken**>&>::push_front(SLToken** const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212decd38 (    0xd0) std::__1::pair<std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>> std::__1::__move_backward_loop<std::__1::_ClassicAlgPolicy>::operator()[abi:v160006]<std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, 0>(std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dece08 (    0xec) std::__1::pair<SLToken**, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>> std::__1::__move_backward_loop<std::__1::_ClassicAlgPolicy>::operator()[abi:v160006]<SLToken**, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, 0>(SLToken**, SLToken**, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212decef4 (   0x36c) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::__add_back_capacity() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ded260 (   0x2c0) SLDictLookup::Create(__CFLocale const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ded520 (    0x68) CopyLocalizedResourceURL(__CFBundle*, __CFString const*, __CFString const*) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ded588 (   0x320) SLDictLookup::CreatePhonemeSymbols(__CFLocale const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ded8a8 (    0xc4) SLDictLookup::~SLDictLookup() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ded96c (     0x4) SLDictLookup::~SLDictLookup() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ded970 (    0x28) SLDictLookup::~SLDictLookup() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212ded998 (   0x164) SLDictLookup::Lookup(SLDictionary*, char const*, unsigned long, SLToken*, bool) const [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dedafc (    0x54) SLTokenBuilder::SLTokenBuilder(SLToken*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dedb50 (    0x58) SLTokenBuilder::Build() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dedba8 (     0x4) SLTokenBuilder::~SLTokenBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dedbac (    0x54) SLTokenBuilder::SLTokenBuilder(SLToken*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dedc00 (   0x14c) SLTokenBuilder::SLTokenBuilder(SLWordBuilder*, bool) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dedd4c (     0x4) SLTokenBuilder::SLTokenBuilder(SLWordBuilder*, bool) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dedd50 (    0x78) SLTokenBuilder::~SLTokenBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deddc8 (    0x28) SLTokenBuilder::~SLTokenBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deddf0 (   0x31c) SLTokenBuilder::Forward() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee10c (     0xc) SLTokenBuilder::SetDictionary(char const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee118 (     0x8) SLTokenBuilder::BeginWord() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee120 (     0x8) SLTokenBuilder::SetText(char const*, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee128 (     0xc) SLTokenBuilder::SetBoundary(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee134 (     0xc) SLTokenBuilder::SetEmphasis(char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee140 (     0xc) SLTokenBuilder::SetPosition(unsigned long, unsigned long) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee14c (     0x4) SLTokenBuilder::EndWord() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee150 (    0x4c) SLTokenBuilder::BeginHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee19c (   0x114) SLTokenBuilder::AddPhoneme(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee2b0 (    0x10) SLTokenBuilder::SetTags(SLWordTagSet const&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee2c0 (   0x100) SLTokenBuilder::EndHomograph() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee3c0 (    0x90) SLTmpLookup::SLTmpLookup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, SLDictLookup*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee450 (     0x4) SLTmpLookup::SLTmpLookup(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, SLDictLookup*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee454 (    0x34) SLTmpLookup::~SLTmpLookup() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee488 (     0x4) SLTmpLookup::~SLTmpLookup() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee48c (     0x8) SLTokenBuilder::WrappedToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee494 (     0x8) SLTokenBuilder::AllowShortcut() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee49c (    0x4c) SLCreateMorphRulesEng(bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee4e8 (     0x4) SLMorphRulesEng::SLMorphRulesEng(bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee4ec (    0x5c) SLCreateFlatMorphRulesEng(SLDictionary*, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee548 (     0x4) SLFlatMorphRulesEng::SLFlatMorphRulesEng(SLDictionary*, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee54c (   0x3f4) SLMorphEng::Store_S_or_Z(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dee940 (   0x3ec) SLMorphEng::Store_T_or_D(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deed2c (   0x1a0) SLMorphEng::MorphLookup_Y(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deeecc (   0x15c) SLMorphEng_S::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212def028 (    0xd8) SLMorphEng_S::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212def100 (   0x268) SLMorphEng_ES::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212def368 (    0xa8) SLMorphEng_ES::POSFromSuffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212def410 (   0x140) SLMorphEng_IES::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212def550 (   0x348) SLMorphEng_E::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212def898 (     0x4) SLMorphEng_ED::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212def89c (    0xc8) SLMorphEng_ED::POSFromSuffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212def964 (    0x98) SLMorphEng_ISH::SLMorphEng_ISH(SLMorphTraits const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212def9fc (    0x98) SLMorphEng_ISH::SLMorphEng_ISH(SLMorphTraits const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212defa94 (     0x4) SLMorphEng_ISH::~SLMorphEng_ISH() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212defa98 (     0x4) SLMorphEng_ISH::~SLMorphEng_ISH() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212defa9c (    0x28) SLMorphEng_ISH::~SLMorphEng_ISH() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212defac4 (     0x4) SLMorphEng_Y::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212defac8 (    0xc8) SLMorphEng_IER::POSFromSuffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212defb90 (    0x90) SLMorphEng_ILY::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212defc20 (   0x148) SLMorphEng_BLY::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212defd68 (    0xa0) SLMorphEng_BLY::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212defe08 (   0x1a4) SLMorphEng_UM::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212deffac (    0x88) SLMorphEng_UM::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0034 (   0x134) SLMorphEng_CALLY::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0168 (   0x230) SLMorphEng_OR::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0398 (   0x110) SLMorphEng_Elvis::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df04a8 (     0x8) SLMorphEng_Elvis::POSFromSuffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df04b0 (    0x70) SLMorphEng_Elvis::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0520 (    0x90) SLMorphEng_Apostrophe::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df05b0 (    0x38) SLMorphEng_Saur::Match(char const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df05e8 (    0xfc) SLMorphEng_Saur::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df06e4 (   0x1d8) std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::insert(std::__1::__wrap_iter<unsigned char const*>, unsigned char&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df08bc (   0x19c) SLMorphEng_BILITY::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0a58 (    0xf4) SLMorphEng_BILITY::POSFromSuffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0b4c (    0xdc) SLMorphEng_BILITY::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0c28 (   0x194) SLMorphEng_ITOUS::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0dbc (   0x130) SLMorphEng_ITOUS::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0eec (    0xa0) SLMorphEng_Tion::SLMorphEng_Tion(char const*, SLPhonemes const&, char const*, SLPhonemes const&, SLMorphTraits const*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0f8c (     0x4) SLMorphEng_Tion::SLMorphEng_Tion(char const*, SLPhonemes const&, char const*, SLPhonemes const&, SLMorphTraits const*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0f90 (    0x50) SLMorphEng_Tion::Match(char const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df0fe0 (   0x14c) SLMorphEng_Tion::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df112c (    0xd4) SLMorphEng_Tion::POSFromSuffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df1200 (   0x110) SLMorphEng_Tion::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df1310 (    0xa0) SLMorphEng_Brit::SLMorphEng_Brit(char const*, char const*, SLMorphTraits const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df13b0 (     0x4) SLMorphEng_Brit::SLMorphEng_Brit(char const*, char const*, SLMorphTraits const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df13b4 (    0xa4) SLMorphEng_Brit::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df1458 (    0xb4) SLMorphEng_Brit::POSFromSuffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df150c (     0x4) SLMorphEng_Brit::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df1510 (    0xa8) SLTionRules::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df15b8 (   0x264) SLMorphEng_NameEnding::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df181c (  0x25e4) SLMorphRulesEng::SLMorphRulesEng(bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df3e00 (    0x54) SLMorphRulesEng::~SLMorphRulesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df3e54 (    0x54) SLMorphRulesEng::~SLMorphRulesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df3ea8 (    0x58) SLMorphRulesEng::~SLMorphRulesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df3f00 (    0xbc) SLFlatMorphRulesEng::SLFlatMorphRulesEng(SLDictionary*, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df3fbc (     0x4) SLMorphEng_S::~SLMorphEng_S() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df3fc0 (    0x28) SLMorphEng_S::~SLMorphEng_S() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df3fe8 (     0x4) SLMorphEng_ES::~SLMorphEng_ES() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df3fec (    0x28) SLMorphEng_ES::~SLMorphEng_ES() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4014 (     0x4) SLMorphEng_IES::~SLMorphEng_IES() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4018 (    0x28) SLMorphEng_IES::~SLMorphEng_IES() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4040 (     0x4) SLMorphEng_E::~SLMorphEng_E() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4044 (    0x28) SLMorphEng_E::~SLMorphEng_E() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df406c (     0x4) SLMorphEng_ED::~SLMorphEng_ED() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4070 (    0x28) SLMorphEng_ED::~SLMorphEng_ED() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4098 (     0x4) SLMorphEng_Y::~SLMorphEng_Y() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df409c (    0x28) SLMorphEng_Y::~SLMorphEng_Y() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df40c4 (     0x4) SLMorphEng_IER::~SLMorphEng_IER() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df40c8 (    0x28) SLMorphEng_IER::~SLMorphEng_IER() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df40f0 (     0x4) SLMorphEng_ILY::~SLMorphEng_ILY() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df40f4 (    0x28) SLMorphEng_ILY::~SLMorphEng_ILY() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df411c (     0x4) SLMorphEng_BLY::~SLMorphEng_BLY() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4120 (    0x28) SLMorphEng_BLY::~SLMorphEng_BLY() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4148 (     0x4) SLMorphEng_UM::~SLMorphEng_UM() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df414c (    0x28) SLMorphEng_UM::~SLMorphEng_UM() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4174 (     0x4) SLMorphEng_CALLY::~SLMorphEng_CALLY() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4178 (    0x28) SLMorphEng_CALLY::~SLMorphEng_CALLY() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df41a0 (     0x4) SLMorphEng_OR::~SLMorphEng_OR() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df41a4 (    0x28) SLMorphEng_OR::~SLMorphEng_OR() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df41cc (     0x4) SLMorphEng_Elvis::~SLMorphEng_Elvis() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df41d0 (    0x28) SLMorphEng_Elvis::~SLMorphEng_Elvis() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df41f8 (     0x4) SLMorphEng_Apostrophe::~SLMorphEng_Apostrophe() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df41fc (    0x28) SLMorphEng_Apostrophe::~SLMorphEng_Apostrophe() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4224 (     0x4) SLMorphEng_Saur::~SLMorphEng_Saur() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4228 (    0x28) SLMorphEng_Saur::~SLMorphEng_Saur() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4250 (     0x4) SLMorphEng_BILITY::~SLMorphEng_BILITY() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4254 (    0x28) SLMorphEng_BILITY::~SLMorphEng_BILITY() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df427c (     0x4) SLMorphEng_ITOUS::~SLMorphEng_ITOUS() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4280 (    0x28) SLMorphEng_ITOUS::~SLMorphEng_ITOUS() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df42a8 (     0x4) SLMorphEng_Tion::~SLMorphEng_Tion() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df42ac (    0x28) SLMorphEng_Tion::~SLMorphEng_Tion() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df42d4 (     0x4) SLMorphEng_Brit::~SLMorphEng_Brit() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df42d8 (    0x28) SLMorphEng_Brit::~SLMorphEng_Brit() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4300 (    0x28) SLTionRules::~SLTionRules() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4328 (     0x4) SLMorphEng_NameEnding::~SLMorphEng_NameEnding() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df432c (    0x28) SLMorphEng_NameEnding::~SLMorphEng_NameEnding() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4354 (     0x4) SLFlatMorphRulesEng::~SLFlatMorphRulesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4358 (    0x28) SLFlatMorphRulesEng::~SLFlatMorphRulesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4380 (     0x4) SLMorphEng::~SLMorphEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4384 (    0x28) SLMorphEng::~SLMorphEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df43ac (     0x4) SLPrefixMorphEng::~SLPrefixMorphEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df43b0 (    0x28) SLPrefixMorphEng::~SLPrefixMorphEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df43d8 (    0x24) SLPrefixMorphEng::Match(char const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df43fc (    0x30) SLPrefixMorphEng::MorphLookup(char const*, unsigned long, SLDictionary*, SLTokenBuilder*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df442c (    0x24) SLPrefixMorphEng::AddAffix(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4450 (    0x98) SLMorphEng_BILITY::SLMorphEng_BILITY(SLMorphTraits const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df44e8 (    0xf0) std::__1::__split_buffer<unsigned char, std::__1::allocator<unsigned char>&>::push_back(unsigned char&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df45d8 (    0x38) SLTagEng::Name(unsigned short) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4610 (    0x28) SLBndEng::Name(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4638 (    0x38) SLCreateElementNamesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4670 (   0x264) SLPhonEng::Find(char, char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df48d4 (   0x178) (null) [FUNC, FunctionStarts] 
                0x0000000212df4a4c (    0x10) SLElementNamesEng::PhonName(unsigned char) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4a5c (    0x10) SLElementNamesEng::PhonText(unsigned char) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4a6c (    0x10) SLElementNamesEng::POSName(unsigned char) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4a7c (    0x3c) SLElementNamesEng::TagName(unsigned short) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4ab8 (    0x28) SLElementNamesEng::BndName(unsigned char) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4ae0 (     0x4) SLElementNamesEng::~SLElementNamesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4ae4 (    0x28) SLElementNamesEng::~SLElementNamesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4b0c (   0x13c) SLPostLexerImpl::SLPostLexerImpl(SLLexer*, SLDictLookup*, SLPronouncer*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4c48 (    0x14) SLPostLexerImpl::clear() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4c5c (     0x4) SLPostLexerImpl::SLPostLexerImpl(SLLexer*, SLDictLookup*, SLPronouncer*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4c60 (    0xc0) SLPostLexerImpl::~SLPostLexerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4d20 (     0x4) SLPostLexerImpl::~SLPostLexerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4d24 (     0x8) non-virtual thunk to SLPostLexerImpl::~SLPostLexerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4d2c (    0x28) SLPostLexerImpl::~SLPostLexerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4d54 (    0x2c) non-virtual thunk to SLPostLexerImpl::~SLPostLexerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df4d80 (   0x770) SLPostLexerImpl::NextToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df54f0 (    0x88) (null) [FUNC, FunctionStarts] 
                0x0000000212df5578 (   0x124) SLPostLexerImpl::HasPossessive(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df569c (    0xe0) SLPostLexerImpl::HandlePossessive(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df577c (   0x2c8) SLPostLexerImpl::PredictRomanNumeral(SLToken*, SLToken*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df5a44 (   0x70c) SLPostLexerImpl::HandleAlpha(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df6150 (   0xcd4) SLPostLexerImpl::HandleNumber(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df6e24 (   0x4e8) SLPostLexerImpl::HandleFraction(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df730c (    0x70) SLPostLexerImpl::HandleLegalSection(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df737c (   0x258) SLPostLexerImpl::HandleGeoLoc(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df75d4 (    0xbc) SLPostLexerImpl::HandleDottedNumbers(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df7690 (   0x144) SLPostLexerImpl::HandleNumericBullet(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df77d4 (   0x284) SLPostLexerImpl::HandleLiteral(SLToken*, bool, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df7a58 (   0x3f4) SLPostLexerImpl::HandleEmoji(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df7e4c (    0x2c) (null) [FUNC, FunctionStarts] 
                0x0000000212df7e78 (   0xc6c) SLPostLexerImpl::HandleAlphaNumeric(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df8ae4 (    0x1c) (null) [FUNC, FunctionStarts] 
                0x0000000212df8b00 (   0x2f0) SLPostLexerImpl::HandleURL(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df8df0 (   0x6d4) SLPostLexerImpl::HandleCitChar(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df94c4 (   0x450) SLPostLexerImpl::HandleInsert(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df9914 (   0x178) SLPostLexerImpl::HandleParagraph(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df9a8c (    0xc4) SLPostLexerImpl::HandleRange(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df9b50 (   0x250) SLPostLexerImpl::HandleRomanNumeral(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212df9da0 (   0x3b0) SLPostLexerImpl::HandleTime(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfa150 (   0x198) SLPostLexerImpl::HandleElapsedTime(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfa2e8 (    0xd8) SLPostLexerImpl::HandleDate(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfa3c0 (    0x70) SLPostLexerImpl::HandleNumericPair(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfa430 (    0x70) SLPostLexerImpl::HandleDimensions(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfa4a0 (   0x254) SLPostLexerImpl::HandleMusicalKey(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfa6f4 (   0x418) SLPostLexerImpl::HandleIPA(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfab0c (    0x8c) SLPostLexerImpl::push_front(SLTokenList const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfab98 (   0x154) SLPostLexerImpl::Classify(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfacec (   0x1a4) SLPostLexerImpl::IsInitial(SLToken*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfae90 (   0x438) SLPostLexerImpl::HandleCurrency(SLSymbol const*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfb2c8 (   0x32c) SLPostLexerImpl::HandleDayAbbr(SLSymbol const*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfb5f4 (   0x4b4) SLPostLexerImpl::HandleMonthAbbr(SLSymbol const*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfbaa8 (   0xbe0) SLPostLexerImpl::HandleApostrophes(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfc688 (     0x8) SLPostLexerImpl::SingleLetterWordAtEnd(unsigned short) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfc690 (     0x8) SLPostLexerImpl::SingleLetterWordAsPrefix(unsigned short, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfc698 (     0x8) SLPostLexerImpl::SingleLetterWordAsInfix(unsigned short, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfc6a0 (   0x11c) SLPostLexerImpl::IsRomanOrdinal(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfc7bc (    0x40) SLPostLexerImpl::PeekMatchingQuote(unsigned short) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfc7fc (   0x940) SLPostLexerImpl::HandleLookup(SLToken*, bool, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfd13c (    0xfc) std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::push_back[abi:v160006](unsigned short&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfd238 (    0x78) SLPostLexerImpl::FollowedByPeriod(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfd2b0 (   0x4cc) SLPostLexerImpl::HandleAbbreviation(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfd77c (    0x8c) std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::operator+[abi:v160006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfd808 (   0x11c) SLPostLexerImpl::FollowedByAllCaps() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfd924 (    0xa4) bool std::__1::operator==[abi:v160006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfd9c8 (   0x350) SLPostLexerImpl::StripPossessive(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfdd18 (   0x200) SLPostLexerImpl::HandleNameInitial(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfdf18 (    0x80) SLToken::SLToken(SLToken const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfdf98 (    0x24) SLPostLexerImpl::EmphasizeAgglomeratedWord(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfdfbc (     0x8) SLPostLexerImpl::IsCompassDirection(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfdfc4 (     0x8) SLPostLexerImpl::IsHouseNumber(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfdfcc (   0x260) SLPostLexerImpl::Transcribe(SLToken*, SLPostLexerImpl::Fold, unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfe22c (    0x1c) (null) [FUNC, FunctionStarts] 
                0x0000000212dfe248 (    0x1c) (null) [FUNC, FunctionStarts] 
                0x0000000212dfe264 (    0xd0) SLPostLexerImpl::HasApostrophe(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfe334 (   0x218) SLPostLexerImpl::HandleTokenInDictionary(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfe54c (   0x4bc) SLPostLexerImpl::HandleURLInSymbols(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfea08 (   0x268) SLPostLexerImpl::FindUnit(SLToken*, unsigned long, unsigned long, char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfec70 (   0x1f0) std::__1::__wrap_iter<unsigned short*> std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::insert<unsigned short*, 0>(std::__1::__wrap_iter<unsigned short const*>, unsigned short*, unsigned short*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfee60 (    0xdc) SLPostLexerImpl::FindCommonCountable(SLToken*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dfef3c (   0x230) SLPostLexerImpl::IsCopyright(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dff16c (   0x3b0) SLPostLexerImpl::SeenMatchingParenQuote(unsigned short, bool, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dff51c (    0x84) SLLexerBuffer::insert(unsigned long, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dff5a0 (   0x1c8) SLPostLexerImpl::MatchingParenQuote(unsigned short, unsigned short) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dff768 (    0x18) (null) [FUNC, FunctionStarts] 
                0x0000000212dff780 (    0xf4) SLPostLexerImpl::HandlePunct(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dff874 (    0x90) SLPostLexerImpl::GenerateSymbol(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, unsigned int, unsigned short, unsigned short) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dff904 (   0x12c) SLPostLexerImpl::FindUnitModifier(SLToken*, SLToken*, char*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dffa30 (   0x21c) SLPostLexerImpl::AppendFullUnit(SLSymbol const*, SLTokenList&, CFRange, bool, SLSymbol const*, char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dffc4c (    0x10) SLPostLexerImpl::AppendMorph(SLToken*, unsigned short const*, unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dffc5c (   0x1e0) std::__1::__wrap_iter<unsigned short*> std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::insert<unsigned short const*, 0>(std::__1::__wrap_iter<unsigned short const*>, unsigned short const*, unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212dffe3c (   0x350) SLPostLexerImpl::HandleElapsedSymbol(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0018c (   0x4cc) SLPostLexerImpl::HandleThousandsSeparators(SLToken*, char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00658 (   0x26c) SLPostLexerImpl::PronounceElapsed(SLToken*, unsigned long, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e008c4 (     0x8) SLPostLexerImpl::FindElapsed(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, unsigned long*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e008cc (     0x8) SLPostLexerImpl::ElapsedSequence(unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e008d4 (     0x4) SLPostLexerImpl::ElapsedSymbol(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, unsigned long, bool, SLSymbol*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e008d8 (    0x2c) std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::resize(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00904 (     0x8) SLPostLexerImpl::StartsCurrencyRange(SLSymbol const*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0090c (    0xf0) SLPostLexerImpl::LooksLikeName(SLToken*, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e009fc (     0x8) SLPostLexerImpl::PeriodIsEndOfSentence(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, SLToken*, SLToken*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00a04 (   0x1f8) std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::insert(std::__1::__wrap_iter<unsigned short const*>, unsigned short&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00bfc (    0x68) SLPostLexerImpl::HandleUnknownChar(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00c64 (    0x10) SLPostLexerImpl::CreateIPAHomograph(unsigned char const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00c74 (    0xd0) SLPostLexer::Create(SLLexer*, SLDictLookup*, SLPronouncer*, __CFLocale const*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00d44 (    0x28) SLPostLexerImpl::LexerBehavior() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00d6c (    0x2c) SLPostLexerImpl::SetLexerBehavior(unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00d98 (    0x28) SLPostLexerImpl::SetDelim(unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00dc0 (    0x28) SLPostLexerImpl::Delim() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00de8 (    0x28) SLPostLexerImpl::SetErrorHandler(void (long) block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00e10 (     0x8) SLPostLexerImpl::SetTuples(SLTuples*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00e18 (     0x4) SLPostLexerImpl::PredictAltNum(SLToken*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00e1c (     0x4) SLPostLexerImpl::PredictSingleLetter(SLToken*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00e20 (     0x4) SLPostLexer::SetTuples(SLTuples*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00e24 (    0x84) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::push_front(SLToken* const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e00ea8 (   0x304) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::__add_front_capacity() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e011ac (    0x84) std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::vector(std::__1::vector<unsigned short, std::__1::allocator<unsigned short>> const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01230 (    0x84) std::__1::vector<SLHomograph*, std::__1::allocator<SLHomograph*>>::vector(std::__1::vector<SLHomograph*, std::__1::allocator<SLHomograph*>> const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e012b4 (    0x44) std::__1::vector<SLHomograph*, std::__1::allocator<SLHomograph*>>::__vallocate[abi:v160006](unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e012f8 (    0xac) invocation function for block in isInMainlandChina() [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e013a4 (   0x424) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::insert(std::__1::__deque_iterator<SLToken*, SLToken* const*, SLToken* const&, SLToken* const* const*, long, 512l>, SLToken* const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e017c8 (   0x19c) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::__move_and_check(std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, SLToken* const*&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01964 (   0x1cc) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::__move_backward_and_check(std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, std::__1::__deque_iterator<SLToken*, SLToken**, SLToken*&, SLToken***, long, 512l>, SLToken* const*&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01b30 (    0x78) std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_string[abi:v160006](std::__1::__uninitialized_size_tag, unsigned long, std::__1::allocator<char> const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01ba8 (    0x18) std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_out_of_range[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01bc0 (    0x5c) std::__1::__throw_out_of_range[abi:v160006](char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01c1c (    0x34) std::out_of_range::out_of_range[abi:v160006](char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01c50 (   0x114) std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::__append(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01d64 (    0xfc) std::__1::__split_buffer<unsigned short, std::__1::allocator<unsigned short>&>::push_back(unsigned short&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01e60 (    0x74) std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::vector(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01ed4 (    0x28) SLPronouncerEng::URLBoundary(SLPronouncerImpl::URLBndType) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e01efc (   0x700) SLPronouncerEng::MakePlural(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e025fc (    0x20) (null) [FUNC, FunctionStarts] 
                0x0000000212e0261c (   0x424) SLPronouncerEng::MakePossessive(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02a40 (    0x3c) SLPronouncerEng::Month(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02a7c (   0x254) SLPronouncerEng::MakePluralUnit(SLToken*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02cd0 (    0x44) SLCreatePronouncerEng(SLDictLookup const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02d14 (     0x4) SLPronouncerEng::~SLPronouncerEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02d18 (    0x28) SLPronouncerEng::~SLPronouncerEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02d40 (    0x10) SLPronouncerEng::NumericBoundary(bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02d50 (    0x14) SLPronouncerEng::Symbol(char const*) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02d64 (    0x2c) SLPronouncerEng::SymbolByKey(unsigned long) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02d90 (     0x8) SLPronouncerEng::SymbolCount() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02d98 (    0x14) SLPronouncerEng::TimeBoundary(bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02dac (    0xa0) SLChar::PushUTF8(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, unsigned short) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02e4c (    0xec) SLChar::PushUTF8(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, unsigned short, unsigned short) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02f38 (    0x74) SLCreatePostLexerEng(SLLexer*, SLDictLookup*, SLPronouncer*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02fac (     0x4) SLPostLexerEng::SLPostLexerEng(SLLexer*, SLDictLookup*, SLPronouncer*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e02fb0 (    0xb0) SLPostLexerEng::SLPostLexerEng(SLLexer*, SLDictLookup*, SLPronouncer*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03060 (    0xc8) SLPostLexerEng::~SLPostLexerEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03128 (     0x4) SLPostLexerEng::~SLPostLexerEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0312c (     0x8) non-virtual thunk to SLPostLexerEng::~SLPostLexerEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03134 (    0x28) SLPostLexerEng::~SLPostLexerEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0315c (    0x2c) non-virtual thunk to SLPostLexerEng::~SLPostLexerEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03188 (     0xc) SLPostLexerEng::SingleLetterWordAtEnd(unsigned short) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03194 (    0x44) SLPostLexerEng::SingleLetterWordAsPrefix(unsigned short, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e031d8 (    0x3c) SLPostLexerEng::SingleLetterWordAsInfix(unsigned short, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03214 (   0x560) SLPostLexerEng::HandlePunct(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03774 (    0x10) (null) [FUNC, FunctionStarts] 
                0x0000000212e03784 (    0x6c) SLPostLexerEng::AppendMorph(SLToken*, unsigned short const*, unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e037f0 (   0x320) SLPostLexerEng::PeriodIsEndOfSentence(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, SLToken*, SLToken*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03b10 (   0x1ac) SLPostLexerEng::StartsCurrencyRange(SLSymbol const*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03cbc (    0x4c) SLPostLexerEng::EmphasizeAgglomeratedWord(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03d08 (    0xc4) SLPostLexerEng::IsCompassDirection(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e03dcc (   0x3c8) SLPostLexerEng::IsHouseNumber(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04194 (    0xb4) SLPostLexerEng::PredictAltNum(SLToken*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04248 (    0x54) SLPostLexerEng::PredictSingleLetter(SLToken*, SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0429c (   0x3ac) SLPostLexerEng::CreateIPAHomograph(unsigned char const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04648 (    0xe4) SLPostLexerEng::FindElapsed(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, unsigned long*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0472c (    0x5c) SLPostLexerEng::ElapsedSequence(unsigned long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04788 (    0x74) SLPostLexerEng::ElapsedSymbol(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, unsigned long, bool, SLSymbol*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e047fc (   0x1b8) SLPostLexerEng::HandleUnknownChar(SLToken*, SLTokenList&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e049b4 (    0x4c) SLPhonemeParser::Create(__CFLocale const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04a00 (     0xc) SLPhonemeParser::IsWordMarker(unsigned char) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04a0c (     0x8) SLPhonemeParser::DefaultWordMarker() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04a14 (    0x5c) SLPhonemeParser::FindTag(char const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04a70 (     0x4) SLPhonemeParser::~SLPhonemeParser() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04a74 (     0x4) SLPhonemeParser::~SLPhonemeParser() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04a78 (     0x4) SLPhonemeParser::~SLPhonemeParser() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04a7c (    0x8c) SLPhonemeParserEng::IsPhoneme(unsigned short*, unsigned char*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04b08 (    0x60) WordPhoneme(unsigned short) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04b68 (    0x6c) SLPhonemeParserEng::IsTunePhoneme(unsigned short*, unsigned char*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04bd4 (    0x18) SLPhonemeParserEng::IsWordMarker(unsigned char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04bec (     0x8) SLPhonemeParserEng::DefaultWordMarker() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04bf4 (     0x8) SLPhonemeParserEng::PhoneticPOS() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04bfc (    0x58) SLPhonemeParserEng::FindPOS(char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04c54 (    0x68) SLPhonemeParserEng::FindTag(char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04cbc (    0x38) SLCreatePhonemeParserEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04cf4 (     0x4) SLPhonemeParserEng::~SLPhonemeParserEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04cf8 (    0x28) SLPhonemeParserEng::~SLPhonemeParserEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04d20 (    0x5c) SLTuplesEng::SLTuplesEng(SLLexer*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04d7c (    0x5c) SLTuplesEng::SLTuplesEng(SLLexer*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04dd8 (    0x90) SLCreateTuplesEng(SLLexer*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04e68 (    0xd4) SLTuplesEng::HandleGlobalFlags(unsigned long&, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04f3c (    0x6c) ToBIToken(unsigned int, unsigned int) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e04fa8 (    0x70) SLTuplesEng::HandleElementFlags(unsigned long&, unsigned long&, SLToken*, unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05018 (    0x94) SLTuplesEng::HandleAgglomerates(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e050ac (     0x4) SLTuplesEng::~SLTuplesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e050b0 (    0x28) SLTuplesEng::~SLTuplesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e050d8 (    0x20) SLTuplesEng::ParseGlobalFlags(long long, unsigned int&, unsigned char&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e050f8 (    0x38) SLTuplesEng::ParseElementFlags(unsigned long, long long, unsigned int&, unsigned int&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05130 (     0x8) non-virtual thunk to SLTuplesEng::~SLTuplesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05138 (    0x2c) non-virtual thunk to SLTuplesEng::~SLTuplesEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05164 (     0x4) SLStemTracker::~SLStemTracker() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05168 (     0x4) SLStemTracker::~SLStemTracker() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0516c (     0x4) SLStemTracker::~SLStemTracker() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05170 (    0x74) SLStemTracker::Create(__CFLocale const*, SLDictLookup*, unsigned long, SLLexer*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e051e4 (     0x4) SLStemTrackerImpl::SLStemTrackerImpl(__CFLocale const*, SLDictLookup*, unsigned long, SLLexer*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e051e8 (   0x1dc) SLStemTrackerImpl::SLStemTrackerImpl(__CFLocale const*, SLDictLookup*, unsigned long, SLLexer*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e053c4 (    0xe0) SLStemTrackerImpl::~SLStemTrackerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e054a4 (     0x4) SLStemTrackerImpl::~SLStemTrackerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e054a8 (     0x8) non-virtual thunk to SLStemTrackerImpl::~SLStemTrackerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e054b0 (    0x28) SLStemTrackerImpl::~SLStemTrackerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e054d8 (    0x2c) non-virtual thunk to SLStemTrackerImpl::~SLStemTrackerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05504 (    0xd4) SLStemTrackerImpl::SeenRecently(char const*, unsigned long, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e055d8 (   0x1bc) SLStemTrackerImpl::Seen(char const*, unsigned long, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05794 (    0x80) SLStemTrackerImpl::Reset() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05814 (    0x80) SLStemTrackerImpl::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05894 (    0x80) non-virtual thunk to SLStemTrackerImpl::Lookup(char const*, unsigned long, SLWordBuilder*, SLDictionary*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05914 (   0x1b0) SLStemTrackerImpl::NextToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05ac4 (    0x28) SLStemTrackerImpl::LexerBehavior() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05aec (    0x28) SLStemTrackerImpl::SetLexerBehavior(unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05b14 (    0x28) SLStemTrackerImpl::SetDelim(unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05b3c (    0x28) SLStemTrackerImpl::Delim() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05b64 (    0x28) SLStemTrackerImpl::SetErrorHandler(void (long) block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05b8c (    0x64) std::__1::__list_imp<SLStemTrackerImpl::Stem*, std::__1::allocator<SLStemTrackerImpl::Stem*>>::clear() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05bf0 (    0x9c) std::__1::vector<SLStemTrackerImpl::Stem, std::__1::allocator<SLStemTrackerImpl::Stem>>::vector(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05c8c (    0x54) std::__1::vector<SLStemTrackerImpl::Stem, std::__1::allocator<SLStemTrackerImpl::Stem>>::__vallocate[abi:v160006](unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05ce0 (    0x18) std::__1::vector<SLStemTrackerImpl::Stem, std::__1::allocator<SLStemTrackerImpl::Stem>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05cf8 (    0x48) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<SLStemTrackerImpl::Stem>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<SLStemTrackerImpl::Stem>>(std::__1::allocator<SLStemTrackerImpl::Stem>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05d40 (    0x68) SLCFArrayBuilder::~SLCFArrayBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05da8 (     0x4) SLCFArrayBuilder::~SLCFArrayBuilder() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05dac (    0x1c) SLCFArrayBuilder::CreateArray() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05dc8 (   0x1ac) SLCFDictionaryBuilder::push_back(void const*, void const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05f74 (    0x28) SLCFDictionaryBuilder::CreateDictionary() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e05f9c (    0xc4) SLDissecter::SLDissecter(SLPronouncer*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06060 (     0x4) SLDissecter::SLDissecter(SLPronouncer*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06064 (    0x4c) SLDissecter::Create(SLPronouncer*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e060b0 (   0x1e8) SLDissecter::DissectNumber(SLToken*, CFRange, SLDissecter::NumInfo*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06298 (    0x80) SLDissecter::DissectUnit(SLToken*, SLDissecter::UnitInfo*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06318 (    0x6c) SLDissecter::DissectRoman(SLToken*, SLDissecter::UnitInfo*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06384 (    0xf0) SLDissecter::EvaluateRoman(SLToken*, CFRange) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06474 (    0x2c) (null) [FUNC, FunctionStarts] 
                0x0000000212e064a0 (   0x220) SLDissecter::DissectTime(SLToken*, SLDissecter::TimeInfo*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e066c0 (   0x230) SLDissecter::DissectDate(SLToken*, SLDissecter::DateInfo*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e068f0 (   0x300) SLDissecter::DissectGeoLoc(SLToken*, SLDissecter::GeoLocInfo*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06bf0 (   0x1f8) SLDissecter::DissectDottedNumber(SLToken*, SLDissecter::DottedNumberInfo*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06de8 (   0x160) SLDissecter::DissectNumericBullet(SLToken*, SLDissecter::NumericBulletInfo*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06f48 (    0x18) std::__1::vector<CFRange, std::__1::allocator<CFRange>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06f60 (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<CFRange>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<CFRange>>(std::__1::allocator<CFRange>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06f98 (    0x5c) SLAgglomerate::Create(__CFLocale const*, SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e06ff4 (    0x20) SLAgglomerate::SLAgglomerate(SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e07014 (    0x20) SLAgglomerate::SLAgglomerate(SLDictionary*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e07034 (     0x4) SLAgglomerate::~SLAgglomerate() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e07038 (     0x4) SLAgglomerate::~SLAgglomerate() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0703c (    0x90) SLAgglomerate::Lookup(char const*, unsigned long, unsigned long, bool, SLTokenList&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e070cc (   0x418) SLAgglomerate::LookupWords(char const*, unsigned long, unsigned long, bool, SLTokenList&) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e074e4 (     0x8) SLAgglomerate::VetWord(SLToken*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e074ec (     0x8) SLAgglomerate::VetLastWord(SLToken*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e074f4 (    0x68) SLCreateAgglomerateEng(SLDictionary*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0755c (    0x64) SLAgglomerateEng::VetWord(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e075c0 (    0xd8) SLAgglomerateEng::VetLastWord(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e07698 (     0x4) SLAgglomerateEng::~SLAgglomerateEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0769c (    0x28) SLAgglomerateEng::~SLAgglomerateEng() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e076c4 (     0x4) SLPhonTranslator::~SLPhonTranslator() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e076c8 (     0x4) SLPhonTranslator::~SLPhonTranslator() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e076cc (     0x4) SLPhonTranslator::~SLPhonTranslator() [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e076d0 (    0x58) SLPhonTranslator::Create(SLPhonTranslator::Rule const*, unsigned long, short const*) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e07728 (   0x218) SLPhonTranslatorImpl::Match(unsigned long, void const*, unsigned long, void const*, unsigned long*, unsigned long*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e07940 (   0x25c) SLPhonTranslatorImpl::MatchIteration(std::__1::vector<SLPhonTranslatorImpl::Hypothesis, std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>> const&, std::__1::vector<SLPhonTranslatorImpl::Hypothesis, std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>>&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e07b9c (   0x47c) SLPhonTranslatorImpl::Match(SLToken*, unsigned long, void const*, unsigned long*, float*, unsigned long*, unsigned long*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e08018 (   0x1d8) SLPhonTranslatorImpl::Map(unsigned long, void const*, unsigned long, void*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e081f0 (   0x320) SLPhonTranslatorImpl::MapIteration(std::__1::vector<SLPhonTranslatorImpl::Hypothesis, std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>> const&, std::__1::vector<SLPhonTranslatorImpl::Hypothesis, std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e08510 (   0x19c) PushMatchHypothesis(std::__1::vector<SLPhonTranslatorImpl::Hypothesis, std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>>&, SLPhonTranslatorImpl::Hypothesis const&) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e086ac (   0x2ac) PushMapHypothesis(std::__1::vector<SLPhonTranslatorImpl::Hypothesis, std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>>&, SLPhonTranslatorImpl::Hypothesis const&, unsigned long, bool&) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e08958 (     0x4) SLPhonTranslatorImpl::~SLPhonTranslatorImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e0895c (     0x4) SLPhonTranslatorImpl::~SLPhonTranslatorImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e08960 (    0x18) std::__1::vector<SLPhonTranslatorImpl::Hypothesis, std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e08978 (    0x48) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>>(std::__1::allocator<SLPhonTranslatorImpl::Hypothesis>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e089c0 (    0x18) std::__1::vector<unsigned long, std::__1::allocator<unsigned long>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e089d8 (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<unsigned long>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<unsigned long>>(std::__1::allocator<unsigned long>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e08a10 ( 0x33890) SLLexerImpl::NextToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e3c2a0 (    0x14) (null) [FUNC, FunctionStarts] 
                0x0000000212e3c2b4 (   0xff4) SLLexerImpl::NextLiteralToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e3d2a8 (   0x1ec) SLLexerImpl::ScanFixed(unsigned int*, unsigned int*, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e3d494 (   0xc50) SLLexerImpl::ScanWhole(unsigned int*, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e3e0e4 (    0x60) (null) [FUNC, FunctionStarts] 
                0x0000000212e3e144 (    0x88) SLLexerImpl::SimpleCommand(unsigned int, SLLexerImpl::CmdArg) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e3e1cc (    0xd4) SLLexerImpl::ToBICommand(unsigned int) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e3e2a0 (  0x3a00) SLLexerImpl::NextCommandToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e41ca0 (   0x114) SLLexerImpl::SkipToNextCommand(bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e41db4 (   0xcb4) SLLexerImpl::NextPhonemeToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e42a68 (    0xf4) std::__1::vector<SLHomograph*, std::__1::allocator<SLHomograph*>>::push_back[abi:v160006](SLHomograph* const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e42b5c (   0x114) std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::push_back[abi:v160006](unsigned char&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e42c70 (   0x10c) std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::push_back[abi:v160006](unsigned char const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e42d7c (   0x108) void std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::assign<unsigned short*, 0>(unsigned short*, unsigned short*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e42e84 (   0x17c) SLLexerImpl::SkipSpaces() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e43000 (   0x218) SLLexerImpl::SkipToNextAttr(bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e43218 (    0x3c) SLLexerImpl::AttrError() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e43254 (   0x104) SLLexerImpl::ScanFloat() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e43358 (   0x2a8) SLLexerImpl::ScanWord(SLToken*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e43600 (    0xf4) std::__1::vector<unsigned short, std::__1::allocator<unsigned short>>::push_back[abi:v160006](unsigned short const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e436f4 (   0x168) SLLexerImpl::ScanIdent(char*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e4385c (  0x12a4) SLLexerImpl::NextTuneToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44b00 (    0x44) std::__1::vector<SLPhonTune, std::__1::allocator<SLPhonTune>>::push_back[abi:v160006](SLPhonTune&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44b44 (    0x18) std::__1::vector<SLPhonTune::PitchTarget, std::__1::allocator<SLPhonTune::PitchTarget>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44b5c (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<SLPhonTune::PitchTarget>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<SLPhonTune::PitchTarget>>(std::__1::allocator<SLPhonTune::PitchTarget>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44b94 (    0xf8) void std::__1::vector<SLPhonTune, std::__1::allocator<SLPhonTune>>::__push_back_slow_path<SLPhonTune>(SLPhonTune&&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44c8c (    0x78) std::__1::vector<SLPhonTune, std::__1::allocator<SLPhonTune>>::__swap_out_circular_buffer(std::__1::__split_buffer<SLPhonTune, std::__1::allocator<SLPhonTune>&>&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44d04 (    0x18) std::__1::vector<SLPhonTune, std::__1::allocator<SLPhonTune>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44d1c (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<SLPhonTune>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<SLPhonTune>>(std::__1::allocator<SLPhonTune>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44d54 (    0xb4) std::__1::reverse_iterator<SLPhonTune*> std::__1::__uninitialized_allocator_move_if_noexcept[abi:v160006]<std::__1::allocator<SLPhonTune>, std::__1::reverse_iterator<SLPhonTune*>, std::__1::reverse_iterator<SLPhonTune*>, std::__1::reverse_iterator<SLPhonTune*>>(std::__1::allocator<SLPhonTune>&, std::__1::reverse_iterator<SLPhonTune*>, std::__1::reverse_iterator<SLPhonTune*>, std::__1::reverse_iterator<SLPhonTune*>) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44e08 (    0x38) std::__1::__exception_guard_exceptions<std::__1::_AllocatorDestroyRangeReverse<std::__1::allocator<SLPhonTune>, std::__1::reverse_iterator<SLPhonTune*>>>::~__exception_guard_exceptions[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44e40 (    0x48) std::__1::_AllocatorDestroyRangeReverse<std::__1::allocator<SLPhonTune>, std::__1::reverse_iterator<SLPhonTune*>>::operator()[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44e88 (    0x38) std::__1::__split_buffer<SLPhonTune, std::__1::allocator<SLPhonTune>&>::~__split_buffer() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44ec0 (    0x5c) std::__1::__split_buffer<SLPhonTune, std::__1::allocator<SLPhonTune>&>::__destruct_at_end[abi:v160006](SLPhonTune*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44f1c (    0xb4) SLLexerImpl::ScanInt() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e44fd0 (  0x10c8) SLLexerImpl::NextSongToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46098 (    0x30) SLCartDict::Create(__CFLocale const*, __CFURL const*) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e460c8 (    0x30) SLMorphRules::Create(__CFLocale const*, bool) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e460f8 (    0x30) SLMorphRules::CreateFlat(__CFLocale const*, SLDictionary*, bool) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46128 (     0x4) SLPronouncerImpl::~SLPronouncerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e4612c (     0x4) SLPronouncerImpl::~SLPronouncerImpl() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46130 (    0x30) SLPronouncer::Create(__CFLocale const*, SLDictLookup const*) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46160 (     0x4) SLTuples::~SLTuples() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46164 (     0x4) SLTuples::~SLTuples() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46168 (    0x30) SLTuples::Create(SLLexer*, __CFLocale const*) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46198 (    0x2c) SLToken::ExcludeHomographs(SLWordTagSet const&) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e461c4 (    0x30) SLElementNames::Create(__CFLocale const*) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e461f4 (     0x4) SLLexerInstance::~SLLexerInstance() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e461f8 (     0x4) SLLexerInstance::~SLLexerInstance() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e461fc (    0x2c) SLCFStringTextSource::Refill(unsigned short*&, unsigned short*&, unsigned short const*) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46228 (    0x30) SLDictLookup::Create(__CFLocale const*) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46258 (    0x30) SLDictLookup::CreatePhonemeSymbols(__CFLocale const*) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e46288 (    0x38) SLDictLookup::Lookup(SLDictionary*, char const*, unsigned long, SLToken*, bool) const (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e462c0 (     0x4) SLPostLexer::~SLPostLexer() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e462c4 (     0x4) SLPostLexer::~SLPostLexer() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e462c8 (    0x30) SLPhonemeParser::Create(__CFLocale const*) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x0000000212e462f8 (    0x30) SLAgglomerate::Create(__CFLocale const*, SLDictionary*) (.cold.1) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
            0x0000000212e46328 (   0x680) __TEXT __auth_stubs
                0x0000000212e46328 (    0x10) DYLD-STUB$$CFArrayCreate [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46338 (    0x10) DYLD-STUB$$CFBundleCopyResourceURL [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46348 (    0x10) DYLD-STUB$$CFBundleGetBundleWithIdentifier [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46358 (    0x10) DYLD-STUB$$CFDataCreateWithBytesNoCopy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46368 (    0x10) DYLD-STUB$$CFDataGetBytePtr [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46378 (    0x10) DYLD-STUB$$CFDataGetLength [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46388 (    0x10) DYLD-STUB$$CFDictionaryCreate [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46398 (    0x10) DYLD-STUB$$CFGetTypeID [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e463a8 (    0x10) DYLD-STUB$$CFLocaleGetValue [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e463b8 (    0x10) DYLD-STUB$$CFNumberCreate [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e463c8 (    0x10) DYLD-STUB$$CFPreferencesCopyValue [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e463d8 (    0x10) DYLD-STUB$$CFRelease [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e463e8 (    0x10) DYLD-STUB$$CFStringAppend [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e463f8 (    0x10) DYLD-STUB$$CFStringAppendCharacters [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46408 (    0x10) DYLD-STUB$$CFStringCompare [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46418 (    0x10) DYLD-STUB$$CFStringCreateCopy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46428 (    0x10) DYLD-STUB$$CFStringCreateMutable [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46438 (    0x10) DYLD-STUB$$CFStringCreateWithCharactersNoCopy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46448 (    0x10) DYLD-STUB$$CFStringCreateWithFormat [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46458 (    0x10) DYLD-STUB$$CFStringCreateWithPascalString [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46468 (    0x10) DYLD-STUB$$CFStringGetCString [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46478 (    0x10) DYLD-STUB$$CFStringGetCStringPtr [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46488 (    0x10) DYLD-STUB$$CFStringGetCharacterAtIndex [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46498 (    0x10) DYLD-STUB$$CFStringGetCharacters [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e464a8 (    0x10) DYLD-STUB$$CFStringGetFileSystemRepresentation [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e464b8 (    0x10) DYLD-STUB$$CFStringGetLength [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e464c8 (    0x10) DYLD-STUB$$CFStringGetMaximumSizeOfFileSystemRepresentation [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e464d8 (    0x10) DYLD-STUB$$CFStringGetTypeID [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e464e8 (    0x10) DYLD-STUB$$CFURLCopyFileSystemPath [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e464f8 (    0x10) DYLD-STUB$$_Block_copy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46508 (    0x10) DYLD-STUB$$_Block_release [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46518 (    0x10) DYLD-STUB$$_Unwind_Resume [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46528 (    0x10) DYLD-STUB$$std::logic_error::logic_error(char const*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46538 (    0x10) DYLD-STUB$$std::bad_array_new_length::bad_array_new_length() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46548 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::append(char const*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46558 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::append(char const*, unsigned long) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46568 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::append(unsigned long, char) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46578 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::assign(char const*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46588 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::assign(char const*, unsigned long) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46598 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::insert(std::__1::__wrap_iter<char const*>, char) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e465a8 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::insert(unsigned long, char const*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e465b8 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::insert(unsigned long, char const*, unsigned long) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e465c8 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::insert(unsigned long, unsigned long, char) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e465d8 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::replace(unsigned long, unsigned long, char const*, unsigned long) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e465e8 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::push_back(char) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e465f8 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46608 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, unsigned long, unsigned long, std::__1::allocator<char> const&) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46618 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::operator=(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46628 (    0x10) DYLD-STUB$$std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::operator+<char, std::__1::char_traits<char>, std::__1::allocator<char>>(char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46638 (    0x10) DYLD-STUB$$std::terminate() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46648 (    0x10) DYLD-STUB$$operator delete[](void*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46658 (    0x10) DYLD-STUB$$operator delete(void*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46668 (    0x10) DYLD-STUB$$operator new[](unsigned long) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46678 (    0x10) DYLD-STUB$$operator new(unsigned long) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46688 (    0x10) DYLD-STUB$$___toupper_l [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46698 (    0x10) DYLD-STUB$$__assert_rtn [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e466a8 (    0x10) DYLD-STUB$$__cxa_allocate_exception [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e466b8 (    0x10) DYLD-STUB$$__cxa_begin_catch [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e466c8 (    0x10) DYLD-STUB$$__cxa_end_catch [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e466d8 (    0x10) DYLD-STUB$$__cxa_free_exception [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e466e8 (    0x10) DYLD-STUB$$__cxa_rethrow [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e466f8 (    0x10) DYLD-STUB$$__cxa_throw [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46708 (    0x10) DYLD-STUB$$__maskrune [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46718 (    0x10) DYLD-STUB$$__maskrune_l [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46728 (    0x10) DYLD-STUB$$__stack_chk_fail [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46738 (    0x10) DYLD-STUB$$__tolower [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46748 (    0x10) DYLD-STUB$$__toupper [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46758 (    0x10) DYLD-STUB$$abort [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46768 (    0x10) DYLD-STUB$$bzero [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46778 (    0x10) DYLD-STUB$$close [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46788 (    0x10) DYLD-STUB$$dispatch_once [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46798 (    0x10) DYLD-STUB$$fprintf [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e467a8 (    0x10) DYLD-STUB$$freelocale [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e467b8 (    0x10) DYLD-STUB$$fwrite [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e467c8 (    0x10) DYLD-STUB$$memchr [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e467d8 (    0x10) DYLD-STUB$$memcmp [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e467e8 (    0x10) DYLD-STUB$$memcpy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e467f8 (    0x10) DYLD-STUB$$memmove [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46808 (    0x10) DYLD-STUB$$memset [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46818 (    0x10) DYLD-STUB$$mmap [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46828 (    0x10) DYLD-STUB$$munmap [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46838 (    0x10) DYLD-STUB$$newlocale [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46848 (    0x10) DYLD-STUB$$open [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46858 (    0x10) DYLD-STUB$$pthread_mutex_lock [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46868 (    0x10) DYLD-STUB$$pthread_mutex_unlock [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46878 (    0x10) DYLD-STUB$$sqlite3_bind_text [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46888 (    0x10) DYLD-STUB$$sqlite3_close [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46898 (    0x10) DYLD-STUB$$sqlite3_column_blob [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e468a8 (    0x10) DYLD-STUB$$sqlite3_column_bytes [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e468b8 (    0x10) DYLD-STUB$$sqlite3_column_int64 [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e468c8 (    0x10) DYLD-STUB$$sqlite3_finalize [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e468d8 (    0x10) DYLD-STUB$$sqlite3_open_v2 [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e468e8 (    0x10) DYLD-STUB$$sqlite3_prepare_v2 [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e468f8 (    0x10) DYLD-STUB$$sqlite3_reset [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46908 (    0x10) DYLD-STUB$$sqlite3_step [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46918 (    0x10) DYLD-STUB$$stat [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46928 (    0x10) DYLD-STUB$$strchr [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46938 (    0x10) DYLD-STUB$$strcmp [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46948 (    0x10) DYLD-STUB$$strlen [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46958 (    0x10) DYLD-STUB$$strncasecmp_l [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46968 (    0x10) DYLD-STUB$$strpbrk [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46978 (    0x10) DYLD-STUB$$strstr [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46988 (    0x10) DYLD-STUB$$u_charName [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x0000000212e46998 (    0x10) DYLD-STUB$$u_isgraph [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
            0x0000000212e469a8 (  0x1aa0) __TEXT __gcc_except_tab
                0x0000000212e469a8 (    0x1c) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x0000000212e469c4 (    0x3c) GCC_except_table8 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a00 (     0xc) GCC_except_table13 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a0c (    0x14) GCC_except_table17 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a20 (    0x10) GCC_except_table23 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a30 (    0x10) GCC_except_table1 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a40 (    0x10) GCC_except_table3 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a50 (    0x10) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a60 (    0x10) GCC_except_table7 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a70 (    0x14) GCC_except_table10 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a84 (    0x10) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x0000000212e46a94 (    0x10) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x0000000212e46aa4 (    0x14) GCC_except_table7 [NameNList, MangledNameNList, NList] 
                0x0000000212e46ab8 (    0x18) GCC_except_table12 [NameNList, MangledNameNList, NList] 
                0x0000000212e46ad0 (    0x14) GCC_except_table17 [NameNList, MangledNameNList, NList] 
                0x0000000212e46ae4 (    0x14) GCC_except_table5 [NameNList, MangledNameNList, NList] 
                0x0000000212e46af8 (    0x20) GCC_except_table8 [NameNList, MangledNameNList, NList] 
                0x0000000212e46b18 (    0x34) GCC_except_table10 [NameNList, MangledNameNList, NList] 
                0x0000000212e46b4c (    0x34) GCC_except_table14 [NameNList, MangledNameNList, NList] 
                0x0000000212e46b80 (    0xc8) GCC_except_table15 [NameNList, MangledNameNList, NList] 
                0x0000000212e46c48 (    0x24) GCC_except_table16 [NameNList, MangledNameNList, NList] 
                0x0000000212e46c6c (    0x18) GCC_except_table19 [NameNList, MangledNameNList, NList] 
                0x0000000212e46c84 (    0x20) GCC_except_table20 [NameNList, MangledNameNList, NList] 
                0x0000000212e46ca4 (    0x1c) GCC_except_table21 [NameNList, MangledNameNList, NList] 
                0x0000000212e46cc0 (    0x30) GCC_except_table27 [NameNList, MangledNameNList, NList] 
                0x0000000212e46cf0 (    0x14) GCC_except_table33 [NameNList, MangledNameNList, NList] 
                0x0000000212e46d04 (    0x20) GCC_except_table34 [NameNList, MangledNameNList, NList] 
                0x0000000212e46d24 (    0x38) GCC_except_table35 [NameNList, MangledNameNList, NList] 
                0x0000000212e46d5c (    0x18) GCC_except_table36 [NameNList, MangledNameNList, NList] 
                0x0000000212e46d74 (    0x1c) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x0000000212e46d90 (    0x14) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x0000000212e46da4 (    0x1c) GCC_except_table1 [NameNList, MangledNameNList, NList] 
                0x0000000212e46dc0 (    0x18) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x0000000212e46dd8 (    0x10) GCC_except_table5 [NameNList, MangledNameNList, NList] 
                0x0000000212e46de8 (   0x12c) GCC_except_table11 [NameNList, MangledNameNList, NList] 
                0x0000000212e46f14 (    0x10) GCC_except_table12 [NameNList, MangledNameNList, NList] 
                0x0000000212e46f24 (    0x18) GCC_except_table16 [NameNList, MangledNameNList, NList] 
                0x0000000212e46f3c (    0x10) GCC_except_table32 [NameNList, MangledNameNList, NList] 
                0x0000000212e46f4c (    0x10) GCC_except_table39 [NameNList, MangledNameNList, NList] 
                0x0000000212e46f5c (    0x10) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x0000000212e46f6c (    0x10) GCC_except_table31 [NameNList, MangledNameNList, NList] 
                0x0000000212e46f7c (    0x44) GCC_except_table33 [NameNList, MangledNameNList, NList] 
                0x0000000212e46fc0 (    0x38) GCC_except_table50 [NameNList, MangledNameNList, NList] 
                0x0000000212e46ff8 (    0x10) GCC_except_table62 [NameNList, MangledNameNList, NList] 
                0x0000000212e47008 (    0x10) GCC_except_table6 [NameNList, MangledNameNList, NList] 
                0x0000000212e47018 (    0x18) GCC_except_table19 [NameNList, MangledNameNList, NList] 
                0x0000000212e47030 (    0x18) GCC_except_table21 [NameNList, MangledNameNList, NList] 
                0x0000000212e47048 (    0x14) GCC_except_table26 [NameNList, MangledNameNList, NList] 
                0x0000000212e4705c (    0x18) GCC_except_table35 [NameNList, MangledNameNList, NList] 
                0x0000000212e47074 (    0x44) GCC_except_table72 [NameNList, MangledNameNList, NList] 
                0x0000000212e470b8 (    0x40) GCC_except_table74 [NameNList, MangledNameNList, NList] 
                0x0000000212e470f8 (    0x24) GCC_except_table86 [NameNList, MangledNameNList, NList] 
                0x0000000212e4711c (    0x38) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x0000000212e47154 (    0x28) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x0000000212e4717c (    0x20) GCC_except_table9 [NameNList, MangledNameNList, NList] 
                0x0000000212e4719c (    0x18) GCC_except_table14 [NameNList, MangledNameNList, NList] 
                0x0000000212e471b4 (    0x10) GCC_except_table26 [NameNList, MangledNameNList, NList] 
                0x0000000212e471c4 (    0x10) GCC_except_table30 [NameNList, MangledNameNList, NList] 
                0x0000000212e471d4 (    0x10) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x0000000212e471e4 (    0x10) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x0000000212e471f4 (    0x1c) GCC_except_table6 [NameNList, MangledNameNList, NList] 
                0x0000000212e47210 (    0x18) GCC_except_table7 [NameNList, MangledNameNList, NList] 
                0x0000000212e47228 (    0x28) GCC_except_table9 [NameNList, MangledNameNList, NList] 
                0x0000000212e47250 (    0x1c) GCC_except_table11 [NameNList, MangledNameNList, NList] 
                0x0000000212e4726c (    0x38) GCC_except_table12 [NameNList, MangledNameNList, NList] 
                0x0000000212e472a4 (    0x1c) GCC_except_table26 [NameNList, MangledNameNList, NList] 
                0x0000000212e472c0 (    0x18) GCC_except_table28 [NameNList, MangledNameNList, NList] 
                0x0000000212e472d8 (    0x28) GCC_except_table29 [NameNList, MangledNameNList, NList] 
                0x0000000212e47300 (    0x18) GCC_except_table36 [NameNList, MangledNameNList, NList] 
                0x0000000212e47318 (    0x1c) GCC_except_table37 [NameNList, MangledNameNList, NList] 
                0x0000000212e47334 (    0x1c) GCC_except_table40 [NameNList, MangledNameNList, NList] 
                0x0000000212e47350 (    0x18) GCC_except_table45 [NameNList, MangledNameNList, NList] 
                0x0000000212e47368 (    0x2c) GCC_except_table54 [NameNList, MangledNameNList, NList] 
                0x0000000212e47394 (   0x5fc) GCC_except_table55 [NameNList, MangledNameNList, NList] 
                0x0000000212e47990 (    0x1c) GCC_except_table59 [NameNList, MangledNameNList, NList] 
                0x0000000212e479ac (    0x1c) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x0000000212e479c8 (    0x34) GCC_except_table9 [NameNList, MangledNameNList, NList] 
                0x0000000212e479fc (    0x88) GCC_except_table13 [NameNList, MangledNameNList, NList] 
                0x0000000212e47a84 (    0x18) GCC_except_table14 [NameNList, MangledNameNList, NList] 
                0x0000000212e47a9c (    0x64) GCC_except_table15 [NameNList, MangledNameNList, NList] 
                0x0000000212e47b00 (    0x18) GCC_except_table17 [NameNList, MangledNameNList, NList] 
                0x0000000212e47b18 (    0x10) GCC_except_table18 [NameNList, MangledNameNList, NList] 
                0x0000000212e47b28 (    0x28) GCC_except_table19 [NameNList, MangledNameNList, NList] 
                0x0000000212e47b50 (    0x18) GCC_except_table21 [NameNList, MangledNameNList, NList] 
                0x0000000212e47b68 (    0x74) GCC_except_table22 [NameNList, MangledNameNList, NList] 
                0x0000000212e47bdc (    0x30) GCC_except_table24 [NameNList, MangledNameNList, NList] 
                0x0000000212e47c0c (    0x14) GCC_except_table25 [NameNList, MangledNameNList, NList] 
                0x0000000212e47c20 (    0x18) GCC_except_table28 [NameNList, MangledNameNList, NList] 
                0x0000000212e47c38 (    0x18) GCC_except_table29 [NameNList, MangledNameNList, NList] 
                0x0000000212e47c50 (    0x14) GCC_except_table30 [NameNList, MangledNameNList, NList] 
                0x0000000212e47c64 (    0x14) GCC_except_table34 [NameNList, MangledNameNList, NList] 
                0x0000000212e47c78 (    0x40) GCC_except_table35 [NameNList, MangledNameNList, NList] 
                0x0000000212e47cb8 (    0x44) GCC_except_table39 [NameNList, MangledNameNList, NList] 
                0x0000000212e47cfc (    0x34) GCC_except_table40 [NameNList, MangledNameNList, NList] 
                0x0000000212e47d30 (    0x4c) GCC_except_table41 [NameNList, MangledNameNList, NList] 
                0x0000000212e47d7c (    0x40) GCC_except_table42 [NameNList, MangledNameNList, NList] 
                0x0000000212e47dbc (    0xc8) GCC_except_table48 [NameNList, MangledNameNList, NList] 
                0x0000000212e47e84 (    0x20) GCC_except_table51 [NameNList, MangledNameNList, NList] 
                0x0000000212e47ea4 (    0x18) GCC_except_table53 [NameNList, MangledNameNList, NList] 
                0x0000000212e47ebc (    0x14) GCC_except_table54 [NameNList, MangledNameNList, NList] 
                0x0000000212e47ed0 (    0x14) GCC_except_table55 [NameNList, MangledNameNList, NList] 
                0x0000000212e47ee4 (    0x2c) GCC_except_table56 [NameNList, MangledNameNList, NList] 
                0x0000000212e47f10 (    0x10) GCC_except_table57 [NameNList, MangledNameNList, NList] 
                0x0000000212e47f20 (    0x18) GCC_except_table61 [NameNList, MangledNameNList, NList] 
                0x0000000212e47f38 (    0x38) GCC_except_table63 [NameNList, MangledNameNList, NList] 
                0x0000000212e47f70 (    0x6c) GCC_except_table64 [NameNList, MangledNameNList, NList] 
                0x0000000212e47fdc (    0x2c) GCC_except_table65 [NameNList, MangledNameNList, NList] 
                0x0000000212e48008 (    0x18) GCC_except_table67 [NameNList, MangledNameNList, NList] 
                0x0000000212e48020 (    0x18) GCC_except_table70 [NameNList, MangledNameNList, NList] 
                0x0000000212e48038 (    0x4c) GCC_except_table79 [NameNList, MangledNameNList, NList] 
                0x0000000212e48084 (    0x24) GCC_except_table80 [NameNList, MangledNameNList, NList] 
                0x0000000212e480a8 (    0x24) GCC_except_table81 [NameNList, MangledNameNList, NList] 
                0x0000000212e480cc (    0x18) GCC_except_table89 [NameNList, MangledNameNList, NList] 
                0x0000000212e480e4 (    0x14) GCC_except_table92 [NameNList, MangledNameNList, NList] 
                0x0000000212e480f8 (    0x28) GCC_except_table107 [NameNList, MangledNameNList, NList] 
                0x0000000212e48120 (     0xc) GCC_except_table115 [NameNList, MangledNameNList, NList] 
                0x0000000212e4812c (     0xc) GCC_except_table121 [NameNList, MangledNameNList, NList] 
                0x0000000212e48138 (    0x10) GCC_except_table138 [NameNList, MangledNameNList, NList] 
                0x0000000212e48148 (     0xc) GCC_except_table142 [NameNList, MangledNameNList, NList] 
                0x0000000212e48154 (    0x10) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x0000000212e48164 (    0x14) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x0000000212e48178 (    0x18) GCC_except_table13 [NameNList, MangledNameNList, NList] 
                0x0000000212e48190 (    0x20) GCC_except_table15 [NameNList, MangledNameNList, NList] 
                0x0000000212e481b0 (    0x40) GCC_except_table19 [NameNList, MangledNameNList, NList] 
                0x0000000212e481f0 (    0x14) GCC_except_table22 [NameNList, MangledNameNList, NList] 
                0x0000000212e48204 (    0x10) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x0000000212e48214 (    0x10) GCC_except_table5 [NameNList, MangledNameNList, NList] 
                0x0000000212e48224 (    0x10) GCC_except_table3 [NameNList, MangledNameNList, NList] 
                0x0000000212e48234 (    0x28) GCC_except_table5 [NameNList, MangledNameNList, NList] 
                0x0000000212e4825c (    0x14) GCC_except_table6 [NameNList, MangledNameNList, NList] 
                0x0000000212e48270 (    0x14) GCC_except_table12 [NameNList, MangledNameNList, NList] 
                0x0000000212e48284 (    0x10) GCC_except_table24 [NameNList, MangledNameNList, NList] 
                0x0000000212e48294 (    0x10) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x0000000212e482a4 (    0x10) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x0000000212e482b4 (    0x48) GCC_except_table7 [NameNList, MangledNameNList, NList] 
                0x0000000212e482fc (    0x10) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x0000000212e4830c (    0x18) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x0000000212e48324 (    0x38) GCC_except_table6 [NameNList, MangledNameNList, NList] 
                0x0000000212e4835c (    0x18) GCC_except_table7 [NameNList, MangledNameNList, NList] 
                0x0000000212e48374 (    0x20) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x0000000212e48394 (    0x78) GCC_except_table13 [NameNList, MangledNameNList, NList] 
                0x0000000212e4840c (    0x14) GCC_except_table27 [NameNList, MangledNameNList, NList] 
                0x0000000212e48420 (    0x10) GCC_except_table32 [NameNList, MangledNameNList, NList] 
                0x0000000212e48430 (    0x18) GCC_except_table1 [NameNList, MangledNameNList, NList] 
            0x0000000212e48448 (  0xf846) __TEXT __cstring
            0x0000000212e57c90 (  0x53b0) __TEXT __const
                0x0000000212e57c90 (    0x39) SLCartDictEng::sPhon [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57cc9 (     0xd) typeinfo name for SLCartDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57cd6 (    0x10) typeinfo name for SLCartDictEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57ce6 (     0xb) typeinfo name for SLPhonEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57cf1 (     0xa) typeinfo name for SLPOSEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57cfb (     0x7) typeinfo name for SLPOS [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57d02 (    0x1e) typeinfo name for SLCompressedDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57d20 (    0x15) typeinfo name for SLWordBuilderProxy [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57d35 (    0x10) typeinfo name for SLWordBuilder [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57d45 (    0x1c) typeinfo name for SLWordBuilderPhonemeProxy [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57d61 (    0x11) typeinfo name for SLEncyclopedia [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57d72 (     0xf) typeinfo name for SLDictionary [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57d81 (    0x18) typeinfo name for SLDictionaryRecursion [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57d99 (    0x17) typeinfo name for SLCartMappedFileDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57db0 (    0x13) typeinfo name for SLMappedFileDict [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57dc3 (    0x19) typeinfo name for SLPrefixMappedFileDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57ddc (    0x16) typeinfo name for SLPrefixDictMapHint [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57df2 (     0xf) typeinfo name for SLMorphRules [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57e01 (     0x9) typeinfo name for SLMorph [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57e0a (    0x15) typeinfo name for SLMorph_Apostrophe [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57e1f (    0x13) typeinfo name for SLFlatMorphRules [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57e32 (    0x15) typeinfo name for SLUncompressedDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57e47 (     0xf) typeinfo name for SLPronouncer [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57e56 (    0x13) typeinfo name for SLPronouncerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57e69 (    0x12) typeinfo name for SLSplitCartDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57e7b (     0xf) typeinfo name for SLPrefixDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57e8a (    0x26) typeinfo name for SLMMapHint [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57eb0 (     0x8) std::__1::deque<SLToken*, std::__1::allocator<SLToken*>>::__block_size [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57eb8 (     0xf) typeinfo name for SLTuplesImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57ec7 (     0xa) typeinfo name for SLTuples [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57ed1 (    0x2f) typeinfo name for SLElementNames [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57f00 (     0x9) typeinfo name for SLLexer [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57f09 (     0xf) typeinfo name for SLTextSource [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57f18 (    0x17) typeinfo name for SLCFStringTextSource [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57f2f (    0x14) typeinfo name for SLTokenTextSource [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57f43 (    0x10) typeinfo name for SLLexerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57f53 (    0x10) typeinfo name for SLLexerBuffer [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57f63 (    0x15) typeinfo name for SLLexerChain [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57f78 (     0xf) typeinfo name for SLDictLookup [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57f87 (    0x21) typeinfo name for SLTokenBuilder [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57fa8 (     0xf) typeinfo name for SLMorphEng_S [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57fb7 (     0xd) typeinfo name for SLMorphEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57fc4 (    0x10) typeinfo name for SLMorphEng_ES [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57fd4 (    0x11) typeinfo name for SLMorphEng_IES [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57fe5 (     0xf) typeinfo name for SLMorphEng_E [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e57ff4 (    0x10) typeinfo name for SLMorphEng_ED [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58004 (    0x11) typeinfo name for SLMorphEng_ISH [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58015 (     0xf) typeinfo name for SLMorphEng_Y [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58024 (    0x11) typeinfo name for SLMorphEng_IER [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58035 (    0x11) typeinfo name for SLMorphEng_ILY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58046 (    0x11) typeinfo name for SLMorphEng_BLY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58057 (    0x10) typeinfo name for SLMorphEng_UM [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58067 (    0x13) typeinfo name for SLMorphEng_CALLY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5807a (    0x10) typeinfo name for SLMorphEng_OR [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5808a (    0x13) typeinfo name for SLMorphEng_Elvis [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5809d (    0x18) typeinfo name for SLMorphEng_Apostrophe [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e580b5 (    0x12) typeinfo name for SLMorphEng_Saur [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e580c7 (    0x14) typeinfo name for SLMorphEng_BILITY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e580db (    0x13) typeinfo name for SLMorphEng_ITOUS [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e580ee (    0x12) typeinfo name for SLMorphEng_Tion [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58100 (    0x12) typeinfo name for SLMorphEng_Brit [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58112 (     0xe) typeinfo name for SLTionRules [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58120 (    0x18) typeinfo name for SLMorphEng_NameEnding [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58138 (    0x12) typeinfo name for SLMorphRulesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5814a (    0x16) typeinfo name for SLFlatMorphRulesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58160 (    0x14) typeinfo name for SLPrefixMorphEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58174 (    0x4c) SLPhonEng::sExt1 [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e581c0 (    0x4c) SLPhonEng::sExt2 [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5820c (    0x4c) SLPhonEng::sType [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58258 (   0x130) SLPhonEng::sFlags [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e58388 (    0x28) typeinfo name for SLElementNamesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e583b0 (    0x12) typeinfo name for SLPostLexerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e583c2 (     0xe) typeinfo name for SLPostLexer [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e583d0 (    0x18) typeinfo name for SLLexerInstance [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e583e8 (     0x8) SLPronouncerEng::sNumSymbols [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e583f0 (     0x8) SLPronouncerEng::sSymbolIndexMax [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e583f8 (    0x12) typeinfo name for SLPronouncerEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5840a (   0x400) SLChar::sUniMap [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5880a (   0xf00) SLChar::sCharClass [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5970a (   0xf00) SLChar::sToUpper [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5a60a (   0xf00) SLChar::sFoldAll [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5b50a (   0xf06) SLChar::sLexFold [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5c410 (    0x14) typeinfo name for SLPostLexerEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5c424 (   0x4a0) sSLIPAMapEngRules [NameNList, MangledNameNList, NList] 
                0x0000000212e5c8c4 (   0x1a0) sSLIPAMapEngIndex [NameNList, MangledNameNList, NList] 
                0x0000000212e5ca64 (   0x340) sSLOxAmMapEngRules [NameNList, MangledNameNList, NList] 
                0x0000000212e5cda4 (   0x1a0) sSLOxAmMapEngIndex [NameNList, MangledNameNList, NList] 
                0x0000000212e5cf44 (    0x12) typeinfo name for SLPhonemeParser [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5cf56 (    0x1a) typeinfo name for SLPhonemeParserEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5cf70 (     0x8) SLTuplesEng::sTuplePOS [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5cf78 (    0x20) SLTuplesEng::sForcePOS [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5cf98 (    0x28) typeinfo name for SLTuplesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5cfc0 (    0x10) typeinfo name for SLStemTracker [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5cfd0 (    0x14) typeinfo name for SLStemTrackerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5cfe4 (    0x10) typeinfo name for SLAgglomerate [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5cff4 (    0x1c) typeinfo name for SLAgglomerateEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5d010 (    0x13) typeinfo name for SLPhonTranslator [EXT, NameNList, MangledNameNList, NList] 
                0x0000000212e5d023 (    0x1d) typeinfo name for SLPhonTranslatorImpl [PEXT, NameNList, MangledNameNList, NList] 
            0x0000000212e5d040 (   0xedc) __TEXT __unwind_info
            0x0000000212e5df20 (    0xd8) __TEXT __eh_frame
        0x000000022e7d4748 ( 0x10ce8) __DATA_CONST SEGMENT
            0x000000022e7d4748 (    0x98) __DATA_CONST __got
            0x000000022e7d47e0 ( 0x10c50) __DATA_CONST __const
                0x000000022e7d47e0 (   0x128) sTypeName [NameNList, MangledNameNList, NList] 
                0x000000022e7d4908 (    0xc8) sFlagName [NameNList, MangledNameNList, NList] 
                0x000000022e7d49d0 (   0x2d0) SLTag::sName [EXT, NameNList, MangledNameNList, NList] 
                0x000000022e7d4ca0 (    0x20) SLBnd::sName [EXT, NameNList, MangledNameNList, NList] 
                0x000000022e7d4cc0 (    0x70) SLEmph::sName [EXT, NameNList, MangledNameNList, NList] 
                0x000000022e7d4d30 (   0x100) SLPOSEng::sName [EXT, NameNList, MangledNameNList, NList] 
                0x000000022e7d4e30 (   0x120) SLTagEng::sName [EXT, NameNList, MangledNameNList, NList] 
                0x000000022e7d4f50 (    0x70) SLBndEng::sName [EXT, NameNList, MangledNameNList, NList] 
                0x000000022e7d4fc0 (   0x260) SLPhonEng::sName [EXT, NameNList, MangledNameNList, NList] 
                0x000000022e7d5220 (   0x260) SLPhonEng::sText [EXT, NameNList, MangledNameNList, NList] 
                0x000000022e7d5480 (    0x20) __block_descriptor_tmp [NameNList, MangledNameNList, NList] 
                0x000000022e7d54a0 (  0x82b0) SLPronouncerEng::sSymbols [PEXT, NameNList, MangledNameNList, NList] 
                0x000000022e7dd750 (  0x7be0) SLPronouncerEng::sSymbolIndex [PEXT, NameNList, MangledNameNList, NList] 
                0x000000022e7e5330 (   0x100) sElapsedSym [NameNList, MangledNameNList, NList] 
        0x0000000237dcae00 (  0x2aa0) __AUTH_CONST SEGMENT
            0x0000000237dcae00 (  0x24d8) __AUTH_CONST __const
                0x0000000237dcae00 (    0x48) typeinfo for SLCartDictEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcae48 (    0x38) typeinfo for SLMorphEng_NameEnding [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcae80 (    0x48) typeinfo for SLMorphRulesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcaec8 (    0x48) typeinfo for SLMorphEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcaf10 (    0x48) typeinfo for SLFlatMorphRulesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcaf58 (    0x10) typeinfo for SLPOS [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcaf68 (    0x18) typeinfo for SLPOSEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcaf80 (    0x10) typeinfo for SLPhonEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcaf90 (    0x38) vtable for SLCartDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcafc8 (    0x38) vtable for SLCartDictEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb000 (    0x18) typeinfo for SLCartDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb018 (    0x50) vtable for SLCompressedDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb068 (    0x18) typeinfo for SLCompressedDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb080 (    0x98) vtable for SLWordBuilder [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb118 (    0x28) vtable for SLDictionary [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb140 (    0x28) vtable for SLEncyclopedia [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb168 (    0x28) vtable for SLDictionaryRecursion [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb190 (    0x98) vtable for SLWordBuilderProxy [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb228 (    0x10) typeinfo for SLWordBuilder [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb238 (    0x18) typeinfo for SLWordBuilderProxy [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb250 (    0x98) vtable for SLWordBuilderPhonemeProxy [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb2e8 (    0x18) typeinfo for SLWordBuilderPhonemeProxy [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb300 (    0x10) typeinfo for SLDictionary [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb310 (    0x18) typeinfo for SLEncyclopedia [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb328 (    0x18) typeinfo for SLDictionaryRecursion [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb340 (    0x28) vtable for SLPrefixMappedFileDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb368 (    0x38) vtable for SLCartMappedFileDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb3a0 (    0x10) typeinfo for SLMappedFileDict [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb3b0 (    0x38) typeinfo for SLCartMappedFileDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb3e8 (    0x38) typeinfo for SLPrefixMappedFileDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb420 (    0x28) vtable for SLPrefixDictMapHint [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb448 (    0x18) typeinfo for SLPrefixDictMapHint [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb460 (    0x68) vtable for SLMorph [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb4c8 (    0x28) vtable for SLMorphRules [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb4f0 (    0x18) typeinfo for SLMorphRules [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb508 (    0x18) typeinfo for SLMorph [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb520 (    0x68) vtable for SLMorph_Apostrophe [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb588 (    0x18) typeinfo for SLMorph_Apostrophe [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb5a0 (    0x28) vtable for SLFlatMorphRules [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb5c8 (    0x18) typeinfo for SLFlatMorphRules [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb5e0 (    0x50) vtable for SLUncompressedDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb630 (    0x18) typeinfo for SLUncompressedDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb648 (   0x110) vtable for SLPronouncer [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb758 (    0x10) typeinfo for SLPronouncer [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb768 (   0x140) vtable for SLPronouncerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb8a8 (    0x18) typeinfo for SLPronouncerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb8c0 (    0x28) vtable for SLSplitCartDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb8e8 (    0x18) typeinfo for SLSplitCartDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb900 (    0x28) vtable for SLPrefixDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb928 (    0x18) typeinfo for SLPrefixDict [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb940 (    0x28) vtable for SLMMapHint [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb968 (    0x10) typeinfo for SLMMapHint [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcb978 (    0xa0) vtable for SLTuplesImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcba18 (    0x18) typeinfo for SLTuples [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcba30 (    0x38) typeinfo for SLTuplesImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcba68 (    0x58) vtable for SLTuples [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbac0 (    0x50) vtable for SLElementNames [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbb10 (    0x10) typeinfo for SLElementNames [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbb20 (    0x30) vtable for SLCFStringTextSource [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbb50 (    0x28) vtable for SLTokenTextSource [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbb78 (    0x50) vtable for SLLexerInstance [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbbc8 (    0x50) vtable for SLLexerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbc18 (    0x20) vtable for SLLexerBuffer [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbc38 (    0x50) vtable for SLLexer [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbc88 (    0x10) typeinfo for SLLexer [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbc98 (    0x28) vtable for SLTextSource [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbcc0 (    0x10) typeinfo for SLTextSource [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbcd0 (    0x18) typeinfo for SLCFStringTextSource [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbce8 (    0x18) typeinfo for SLTokenTextSource [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbd00 (    0x18) typeinfo for SLLexerInstance [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbd18 (    0x18) typeinfo for SLLexerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbd30 (    0x10) typeinfo for SLLexerBuffer [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbd40 (    0x50) vtable for SLLexerChain [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbd90 (    0x18) typeinfo for SLLexerChain [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbda8 (    0x20) vtable for SLDictLookup [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbdc8 (    0xa8) vtable for SLTokenBuilder [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbe70 (    0x10) typeinfo for SLDictLookup [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbe80 (    0x18) typeinfo for SLTokenBuilder [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbe98 (    0x68) vtable for SLMorphEng_ISH [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbf00 (    0x68) vtable for SLMorphEng_Tion [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbf68 (    0x68) vtable for SLMorphEng_Brit [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbfd0 (    0x28) vtable for SLMorphRulesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcbff8 (    0x28) vtable for SLFlatMorphRulesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc020 (    0x68) vtable for SLMorphEng_S [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc088 (    0x18) typeinfo for SLMorphEng_S [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc0a0 (    0x68) vtable for SLMorphEng_ES [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc108 (    0x18) typeinfo for SLMorphEng_ES [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc120 (    0x68) vtable for SLMorphEng_IES [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc188 (    0x18) typeinfo for SLMorphEng_IES [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc1a0 (    0x68) vtable for SLMorphEng_E [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc208 (    0x18) typeinfo for SLMorphEng_E [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc220 (    0x68) vtable for SLMorphEng_ED [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc288 (    0x18) typeinfo for SLMorphEng_ED [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc2a0 (    0x18) typeinfo for SLMorphEng_ISH [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc2b8 (    0x68) vtable for SLMorphEng_Y [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc320 (    0x18) typeinfo for SLMorphEng_Y [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc338 (    0x68) vtable for SLMorphEng_IER [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc3a0 (    0x18) typeinfo for SLMorphEng_IER [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc3b8 (    0x68) vtable for SLMorphEng_ILY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc420 (    0x18) typeinfo for SLMorphEng_ILY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc438 (    0x68) vtable for SLMorphEng_BLY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc4a0 (    0x18) typeinfo for SLMorphEng_BLY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc4b8 (    0x68) vtable for SLMorphEng_UM [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc520 (    0x18) typeinfo for SLMorphEng_UM [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc538 (    0x68) vtable for SLMorphEng_CALLY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc5a0 (    0x18) typeinfo for SLMorphEng_CALLY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc5b8 (    0x68) vtable for SLMorphEng_OR [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc620 (    0x18) typeinfo for SLMorphEng_OR [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc638 (    0x68) vtable for SLMorphEng_Elvis [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc6a0 (    0x18) typeinfo for SLMorphEng_Elvis [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc6b8 (    0x68) vtable for SLMorphEng_Apostrophe [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc720 (    0x18) typeinfo for SLMorphEng_Apostrophe [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc738 (    0x68) vtable for SLMorphEng_Saur [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc7a0 (    0x18) typeinfo for SLMorphEng_Saur [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc7b8 (    0x68) vtable for SLMorphEng_BILITY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc820 (    0x18) typeinfo for SLMorphEng_BILITY [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc838 (    0x68) vtable for SLMorphEng_ITOUS [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc8a0 (    0x18) typeinfo for SLMorphEng_ITOUS [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc8b8 (    0x18) typeinfo for SLMorphEng_Tion [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc8d0 (    0x18) typeinfo for SLMorphEng_Brit [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc8e8 (    0x28) vtable for SLTionRules [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc910 (    0x18) typeinfo for SLTionRules [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc928 (    0x28) vtable for SLMorphEng_NameEnding [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc950 (    0x68) vtable for SLMorphEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcc9b8 (    0x68) vtable for SLPrefixMorphEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcca20 (    0x18) typeinfo for SLPrefixMorphEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcca38 (    0x50) vtable for SLElementNamesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcca88 (    0x18) typeinfo for SLElementNamesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccaa0 (   0x108) vtable for SLPostLexerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccba8 (    0x18) typeinfo for SLPostLexer [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccbc0 (    0x38) typeinfo for SLPostLexerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccbf8 (    0x58) vtable for SLPostLexer [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccc50 (    0x20) __block_literal_global [NameNList, MangledNameNList, NList] 
                0x0000000237dccc70 (   0x140) vtable for SLPronouncerEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccdb0 (    0x18) typeinfo for SLPronouncerEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccdc8 (   0x108) vtable for SLPostLexerEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcced0 (    0x18) typeinfo for SLPostLexerEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccee8 (    0x58) vtable for SLPhonemeParser [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccf40 (    0x10) typeinfo for SLPhonemeParser [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccf50 (    0x58) vtable for SLPhonemeParserEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccfa8 (    0x18) typeinfo for SLPhonemeParserEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dccfc0 (    0xa0) vtable for SLTuplesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd060 (    0x18) typeinfo for SLTuplesEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd078 (    0x90) vtable for SLStemTrackerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd108 (    0x60) vtable for SLStemTracker [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd168 (    0x18) typeinfo for SLStemTracker [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd180 (    0x38) typeinfo for SLStemTrackerImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd1b8 (    0x30) vtable for SLAgglomerate [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd1e8 (    0x10) typeinfo for SLAgglomerate [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd1f8 (    0x30) vtable for SLAgglomerateEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd228 (    0x18) typeinfo for SLAgglomerateEng [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd240 (    0x38) vtable for SLPhonTranslator [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd278 (    0x10) typeinfo for SLPhonTranslator [EXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd288 (    0x38) vtable for SLPhonTranslatorImpl [PEXT, NameNList, MangledNameNList, NList] 
                0x0000000237dcd2c0 (    0x18) typeinfo for SLPhonTranslatorImpl [PEXT, NameNList, MangledNameNList, NList] 
            0x0000000237dcd2d8 (   0x280) __AUTH_CONST __cfstring
            0x0000000237dcd558 (   0x348) __AUTH_CONST __auth_got
        0x000000023168ea10 (    0xf0) __DATA SEGMENT
            0x000000023168ea10 (    0xd8) __DATA __data
                0x000000023168ea10 (    0x40) sMapCacheMutex [NameNList, MangledNameNList, NList] 
                0x000000023168ea50 (     0x8) sMappedFiles [NameNList, MangledNameNList, NList] 
                0x000000023168ea58 (     0x8) kCFTuneDurationKey [EXT, NameNList, MangledNameNList, NList] 
                0x000000023168ea60 (     0x8) kCFTunePitchTargetsKey [EXT, NameNList, MangledNameNList, NList] 
                0x000000023168ea68 (     0x8) kCFTunePitchKey [EXT, NameNList, MangledNameNList, NList] 
                0x000000023168ea70 (     0x8) kCFTuneLocationKey [EXT, NameNList, MangledNameNList, NList] 
                0x000000023168ea78 (    0x38) sElapsedNameSingular [PEXT, NameNList, MangledNameNList, NList] 
                0x000000023168eab0 (    0x38) sElapsedNamePlural [PEXT, NameNList, MangledNameNList, NList] 
            0x000000023168eae8 (    0x10) __DATA __bss
                0x000000023168eae8 (     0x8) isInMainlandChina()::isInMainlandChina [NameNList, MangledNameNList, NList] 
                0x000000023168eaf0 (     0x8) isInMainlandChina()::onceToken [NameNList, MangledNameNList, NList] 
            0x000000023168eaf8 (     0x8) __DATA __common
                0x000000023168eaf8 (     0x8) SLLexerInstance::sNoDelim [PEXT, NameNList, MangledNameNList, NList] 
        0x000000023a910000 (0x37bf0000) __LINKEDIT SEGMENT
