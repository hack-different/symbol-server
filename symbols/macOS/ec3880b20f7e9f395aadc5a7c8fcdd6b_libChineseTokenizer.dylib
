/usr/lib/libChineseTokenizer.dylib [arm64e, 0.025262 seconds]:
    8AED73B1-6692-339E-BEA7-A8775F54D2F8 /usr/lib/libChineseTokenizer.dylib [DYLIB, DYLDSHAREDCACHE, FaultedFromDiskDyldSharedCache, MMap64]  
        0x000000018e203000 (  0x7ff8) __TEXT SEGMENT
            0x000000018e203000 (  0x14b4) MACH_HEADER
            0x000000018e2044b4 (  0x5b7c) __TEXT __text
                0x000000018e2044b4 (    0xc8) zhtok::WordBreaker::WordBreaker(__CFLocale const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20457c (    0x30) zhtok::WordBreaker::close() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2045ac (     0x4) zhtok::WordBreaker::WordBreaker(__CFLocale const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2045b0 (    0x40) zhtok::WordBreaker::~WordBreaker() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2045f0 (     0xc) __clang_call_terminate [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2045fc (     0x4) zhtok::WordBreaker::~WordBreaker() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204600 (    0xc0) zhtok::WordBreaker::set(unsigned short const*, long long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2046c0 (    0x8c) createPathRelativeToPlatformRoot [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20474c (    0xa8) languageForLocale [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2047f4 (    0x54) languageModelBundleNameForLocale [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204848 (    0x74) createLocaleForLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2048bc (    0x80) zhtok::UTF8StringFromCFString(__CFString const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20493c (    0x80) zhtok::charactersFromCFStringInRange(__CFString const*, CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2049bc (    0x10) zhtok::LatticeWord::clearHypotheses() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2049cc (     0x8) zhtok::LatticeWord::createDescription() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2049d4 (     0x8) zhtok::LatticeWord::initializeBeginSentinelHypothesis(zhtok::Hypothesis* () block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2049dc (    0x20) zhtok::LatticeWord::connectPreviousWord(zhtok::LatticeWord const*, zhtok::ConnectionContext const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2049fc (    0xbc) ChineseTokenizerCreate [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204ab8 (    0x2c) ChineseTokenizerRelease [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204ae4 (     0xc) ChineseTokenizerSetString [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204af0 (     0xc) ChineseTokenizerAdvanceToNextToken [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204afc (    0x10) ChineseTokenizerGetCurrentTokenRange [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204b0c (     0xc) ChineseTokenizerGoToTokenAtIndex [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204b18 (    0xb4) ChineseTokenizerSetDynamicLexicon [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204bcc (     0xc) ChineseTokenizerSetCustomWordCheckBlock [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204bd8 (    0x90) reportAssertionFailure [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204c68 (   0x128) reportBacktrace [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204d90 (    0x90) zhtok::ChineseLMTokenizer::ChineseLMTokenizer(__CFLocale const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204e20 (     0x4) zhtok::ChineseLMTokenizer::ChineseLMTokenizer(__CFLocale const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204e24 (    0x90) zhtok::ChineseLMTokenizer::~ChineseLMTokenizer() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204eb4 (     0x4) zhtok::ChineseLMTokenizer::~ChineseLMTokenizer() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204eb8 (    0x28) zhtok::ChineseLMTokenizer::~ChineseLMTokenizer() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204ee0 (    0x28) zhtok::ChineseLMTokenizer::isAvailable() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204f08 (    0x4c) zhtok::ChineseLMTokenizer::reset() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204f54 (    0x48) zhtok::ChineseLMTokenizer::isValid(__CFString const*, CFRange) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e204f9c (   0x18c) zhtok::ChineseLMTokenizer::setString(__CFString const*, CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205128 (    0x2c) zhtok::ChineseLMTokenizer::advanceToNextToken() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205154 (    0x28) zhtok::ChineseLMTokenizer::getCurrentTokenRange() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20517c (    0x88) zhtok::ChineseLMTokenizer::goToTokenAtIndex(long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205204 (     0x8) zhtok::ChineseLMTokenizer::mutableWordLatticeController() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20520c (     0x8) zhtok::ChineseLMTokenizer::setCustomWordCheckBlock(long, bool (unsigned short const*, long) block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205214 (   0x120) std::__1::vector<zhtok::internal::FixedSizedArray<void*>, std::__1::allocator<zhtok::internal::FixedSizedArray<void*>>>::reserve(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205334 (    0x18) std::__1::vector<zhtok::internal::FixedSizedArray<void*>, std::__1::allocator<zhtok::internal::FixedSizedArray<void*>>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20534c (    0x5c) std::__1::__throw_length_error[abi:v160006](char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2053a8 (    0x34) std::length_error::length_error[abi:v160006](char const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2053dc (    0x4c) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<zhtok::internal::FixedSizedArray<void*>>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<zhtok::internal::FixedSizedArray<void*>>>(std::__1::allocator<zhtok::internal::FixedSizedArray<void*>>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205428 (    0x34) std::__throw_bad_array_new_length[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20545c (   0x120) std::__1::vector<zhtok::internal::FixedSizedArray<zhtok::LatticeWord*>, std::__1::allocator<zhtok::internal::FixedSizedArray<zhtok::LatticeWord*>>>::reserve(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20557c (    0x18) std::__1::vector<zhtok::internal::FixedSizedArray<zhtok::LatticeWord*>, std::__1::allocator<zhtok::internal::FixedSizedArray<zhtok::LatticeWord*>>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205594 (    0x4c) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<zhtok::internal::FixedSizedArray<zhtok::LatticeWord*>>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<zhtok::internal::FixedSizedArray<zhtok::LatticeWord*>>>(std::__1::allocator<zhtok::internal::FixedSizedArray<zhtok::LatticeWord*>>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2055e0 (    0x4c) zhtok::Word::createDescription() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20562c (   0x268) zhtok::Word::summary(__CFString const*) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205894 (   0x2a8) std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:v160006]() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205b3c (   0x128) std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_stringstream() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205c64 (   0x1a4) std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:v160006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205e08 (   0x188) std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:v160006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e205f90 (    0x9c) std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_string[abi:v160006](unsigned long, char) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20602c (    0x18) std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206044 (    0x50) zhtok::HypothesisSet::initializeBeginSentinelHypothesis(zhtok::Hypothesis* () block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206094 (     0x8) zhtok::HypothesisSet::clear() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20609c (    0x1c) zhtok::HypothesisSet::bestBacktraceCost() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2060b8 (    0x94) zhtok::HypothesisSet::costOfNewHypothesis(zhtok::Hypothesis const*, zhtok::Word const*, zhtok::ConnectionContext const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20614c (   0x398) zhtok::HypothesisSet::connectPreviousHypotheses(zhtok::Word const*, zhtok::HypothesisSet const*, zhtok::Word const*, zhtok::ConnectionContext const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2064e4 (    0x38) zhtok::ConnectionContext::ConnectionContext(void*, ChineseTokenizerOptions, zhtok::Hypothesis* (zhtok::Word const*, double, zhtok::Hypothesis const*) block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20651c (    0x38) zhtok::ConnectionContext::ConnectionContext(void*, ChineseTokenizerOptions, zhtok::Hypothesis* (zhtok::Word const*, double, zhtok::Hypothesis const*) block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206554 (    0x30) zhtok::ConnectionContext::~ConnectionContext() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206584 (    0x30) zhtok::ConnectionContext::~ConnectionContext() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2065b4 (    0x20) zhtok::DynamicLexiconBuilder::DynamicLexiconBuilder() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2065d4 (    0x20) zhtok::DynamicLexiconBuilder::DynamicLexiconBuilder() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2065f4 (    0x50) zhtok::DynamicLexiconBuilder::~DynamicLexiconBuilder() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206644 (     0x4) zhtok::DynamicLexiconBuilder::~DynamicLexiconBuilder() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206648 (    0x28) zhtok::DynamicLexiconBuilder::~DynamicLexiconBuilder() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206670 (   0x11c) zhtok::DynamicLexiconBuilder::build(ChineseTokenizerLanguage, __CFArray const*, zhtok::TokenizerLexicon**) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20678c (    0x74) zhtok::DynamicLexiconBuilder::registerLanguage(ChineseTokenizerLanguage) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206800 (    0x98) zhtok::DynamicLexiconBuilder::filterAndRegisterWords(__CFArray const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206898 (    0xe4) zhtok::DynamicLexiconBuilder::filter(__CFArray*, __CFArray const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20697c (   0x378) zhtok::WordLatticeController::WordLatticeController(__CFLocale const*, ChineseTokenizerOptions) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206cf4 (    0x40) std::__1::unique_ptr<zhtok::ConnectionContext, std::__1::default_delete<zhtok::ConnectionContext>>::reset[abi:v160006](zhtok::ConnectionContext*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206d34 (     0xc) invocation function for block in zhtok::WordLatticeController::WordLatticeController(__CFLocale const*, ChineseTokenizerOptions) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206d40 (     0x4) zhtok::WordLatticeController::WordLatticeController(__CFLocale const*, ChineseTokenizerOptions) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206d44 (   0x114) zhtok::WordLatticeController::~WordLatticeController() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206e58 (     0x4) zhtok::WordLatticeController::~WordLatticeController() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206e5c (    0x28) zhtok::WordLatticeController::~WordLatticeController() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e206e84 (   0x1a4) zhtok::WordLatticeController::reset() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207028 (   0x128) zhtok::Lattice::clear() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207150 (   0x1a8) zhtok::WordLatticeController::getBestSegmentation(std::__1::vector<CFRange, std::__1::allocator<CFRange>>&, __CFString const*, long) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2072f8 (     0x4) zhtok::WordLatticeController::finalize() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2072fc (    0x88) zhtok::WordLatticeController::connectEOS() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207384 (    0xa8) zhtok::WordLatticeController::setDynamicLexicon(zhtok::TokenizerLexicon*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20742c (    0x60) zhtok::WordLatticeController::updateLattice(zhtok::LatticeWord*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20748c (   0x218) zhtok::Lattice::insert(unsigned long, zhtok::LatticeWord*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2076a4 (   0x164) zhtok::WordLatticeController::connectToWordsEndingAtIndex(zhtok::LatticeWord*, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207808 (    0x80) zhtok::WordLatticeController::connectToPreviousWord(zhtok::LatticeWord const*, zhtok::LatticeWord*, zhtok::ConnectionContext const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207888 (    0x8c) zhtok::WordLatticeController::addWord(void*, long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207914 (    0x50) zhtok::WordLatticeController::addUNKWord(CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207964 (    0x50) zhtok::WordLatticeController::addSpace(CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2079b4 (    0x50) zhtok::WordLatticeController::addNewline(CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207a04 (   0x124) zhtok::WordLatticeController::addNonChineseWord(unsigned short const*, CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207b28 (    0x70) zhtok::WordLatticeController::addDynamicWord(void*, unsigned short const*, CFRange const&) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207b98 (   0x104) zhtok::WordLatticeController::updateNonChineseTokenRange(unsigned short const*, CFRange, bool, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207c9c (   0x138) zhtok::WordLatticeController::addLatinWords(unsigned short const*, CFRange, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207dd4 (    0x84) zhtok::WordLatticeController::addEmojiWords(unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207e58 (    0xc0) zhtok::WordLatticeController::breakEmojiWords(unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e207f18 (   0x10c) zhtok::WordLatticeController::addCustomWordIfFound(unsigned short const*, long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208024 (   0x4ac) zhtok::WordLatticeController::addComposedCharacteracterInRange(unsigned short const*, CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2084d0 (    0x88) zhtok::WordLatticeController::addWord(void*, unsigned short const*, long, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208558 (    0xcc) zhtok::WordLatticeController::rewriteLatticeWithDynamicWords(unsigned short const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208624 (    0x4c) zhtok::WordLatticeController::setCustomWordCheckBlock(long, bool (unsigned short const*, long) block_pointer) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208670 (    0x40) std::__1::unique_ptr<zhtok::LatticeSessionData, std::__1::default_delete<zhtok::LatticeSessionData>>::reset[abi:v160006](zhtok::LatticeSessionData*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2086b0 (    0x4c) std::__1::default_delete<zhtok::Lattice>::operator()[abi:v160006](zhtok::Lattice*) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2086fc (    0x40) std::__1::unique_ptr<zhtok::WordBreaker, std::__1::default_delete<zhtok::WordBreaker>>::reset[abi:v160006](zhtok::WordBreaker*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20873c (    0x18) std::__1::vector<CFRange, std::__1::allocator<CFRange>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208754 (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<CFRange>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<CFRange>>(std::__1::allocator<CFRange>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20878c (    0x24) zhtok::TokenizerLexicon::TokenizerLexicon() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2087b0 (    0x24) zhtok::TokenizerLexicon::TokenizerLexicon() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2087d4 (    0xfc) zhtok::TokenizerLexicon::TokenizerLexicon(ChineseTokenizerLanguage) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2088d0 (     0x4) zhtok::TokenizerLexicon::TokenizerLexicon(ChineseTokenizerLanguage) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2088d4 (    0x50) zhtok::TokenizerLexicon::~TokenizerLexicon() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208924 (     0x4) zhtok::TokenizerLexicon::~TokenizerLexicon() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208928 (    0x28) zhtok::TokenizerLexicon::~TokenizerLexicon() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208950 (    0x38) zhtok::TokenizerLexicon::reset() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208988 (     0x8) zhtok::TokenizerLexicon::getTraversedLength(void*) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208990 (     0x8) zhtok::TokenizerLexicon::cursorHasEntry(void*) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208998 (     0x8) zhtok::TokenizerLexicon::getWordID(void*) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2089a0 (     0xc) zhtok::TokenizerLexicon::cursorByAdvancingWithCharacters(void*, unsigned short const*, long) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2089ac (    0x48) zhtok::TokenizerLexicon::setLexicon(void*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2089f4 (    0x7c) zhtok::LatticeSessionData::Sentinel::createBOS() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208a70 (    0x7c) zhtok::LatticeSessionData::Sentinel::createEOS() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208aec (   0x110) zhtok::LatticeSessionData::LatticeSessionData() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208bfc (    0x98) zhtok::LatticeSessionData::resetSentinels() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208c94 (     0x4) zhtok::LatticeSessionData::LatticeSessionData() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208c98 (    0x74) zhtok::LatticeSessionData::~LatticeSessionData() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208d0c (    0x68) zhtok::LatticeSessionData::reset() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208d74 (     0x4) zhtok::LatticeSessionData::~LatticeSessionData() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208d78 (     0x4) zhtok::LatticeSessionData::logStatistics() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208d7c (    0x58) zhtok::ObjectPool<zhtok::Hypothesis>::reset() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208dd4 (    0x58) zhtok::ObjectPool<zhtok::Word>::reset() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208e2c (    0x58) zhtok::ObjectPool<zhtok::LatticeWord>::reset() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208e84 (    0x58) zhtok::ObjectPool<zhtok::HypothesisSet>::reset() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208edc (    0x48) invocation function for block in zhtok::LatticeSessionData::resetSentinels() [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208f24 (    0x58) zhtok::LatticeSessionData::makeHypothesis(zhtok::Word const*, double, zhtok::Hypothesis const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208f7c (    0x2c) zhtok::LatticeSessionData::makeHypothesisSet() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e208fa8 (   0x130) zhtok::ObjectPool<zhtok::HypothesisSet>::alloc() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2090d8 (   0x130) zhtok::ObjectPool<zhtok::Hypothesis>::alloc() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209208 (    0x44) zhtok::LatticeSessionData::makeWord(zhtok::Word::WordType, unsigned int, CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20924c (   0x130) zhtok::ObjectPool<zhtok::Word>::alloc() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20937c (    0x8c) zhtok::LatticeSessionData::makeLatticeWord(zhtok::Word::WordType, unsigned int, CFRange) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209408 (   0x130) zhtok::ObjectPool<zhtok::LatticeWord>::alloc() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209538 (    0x50) zhtok::ObjectPool<zhtok::Hypothesis>::ObjectPool(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209588 (    0x50) zhtok::ObjectPool<zhtok::Word>::ObjectPool(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2095d8 (    0x50) zhtok::ObjectPool<zhtok::LatticeWord>::ObjectPool(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209628 (    0x50) zhtok::ObjectPool<zhtok::HypothesisSet>::ObjectPool(unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209678 (    0x6c) std::__1::default_delete<zhtok::LatticeSessionData::Sentinel>::operator()[abi:v160006](zhtok::LatticeSessionData::Sentinel*) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2096e4 (    0x58) zhtok::ObjectPool<zhtok::Hypothesis>::~ObjectPool() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20973c (    0x58) zhtok::ObjectPool<zhtok::Word>::~ObjectPool() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209794 (    0x58) zhtok::ObjectPool<zhtok::LatticeWord>::~ObjectPool() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2097ec (    0x58) zhtok::ObjectPool<zhtok::HypothesisSet>::~ObjectPool() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209844 (    0x18) std::__1::vector<zhtok::HypothesisSet*, std::__1::allocator<zhtok::HypothesisSet*>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20985c (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<zhtok::HypothesisSet*>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<zhtok::HypothesisSet*>>(std::__1::allocator<zhtok::HypothesisSet*>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209894 (    0x18) std::__1::vector<zhtok::Hypothesis*, std::__1::allocator<zhtok::Hypothesis*>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2098ac (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<zhtok::Hypothesis*>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<zhtok::Hypothesis*>>(std::__1::allocator<zhtok::Hypothesis*>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2098e4 (    0x18) std::__1::vector<zhtok::Word*, std::__1::allocator<zhtok::Word*>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2098fc (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<zhtok::Word*>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<zhtok::Word*>>(std::__1::allocator<zhtok::Word*>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209934 (    0x18) std::__1::vector<zhtok::LatticeWord*, std::__1::allocator<zhtok::LatticeWord*>>::__throw_length_error[abi:v160006]() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e20994c (    0x38) std::__1::__allocation_result<std::__1::allocator_traits<std::__1::allocator<zhtok::LatticeWord*>>::pointer> std::__1::__allocate_at_least[abi:v160006]<std::__1::allocator<zhtok::LatticeWord*>>(std::__1::allocator<zhtok::LatticeWord*>&, unsigned long) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209984 (    0x74) zhtok::HypothesisLogger::printString(__CFString const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2099f8 (     0x4) zhtok::HypothesisLogger::logConnectionAttempt(zhtok::Word const*, zhtok::Word const*, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e2099fc (     0x4) zhtok::HypothesisLogger::logDroppedLeftHypothesisDueToExistingBetterCost(zhtok::Hypothesis const*, double) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209a00 (     0x4) zhtok::HypothesisLogger::logDroppedLowPotentialLeftHypothesis(zhtok::Hypothesis const*, double, double) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209a04 (     0x4) zhtok::HypothesisLogger::logDroppedRightHypothesisDueToExistingBetterCost(zhtok::Hypothesis const*, zhtok::Hypothesis const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209a08 (     0x4) zhtok::HypothesisLogger::logPrunedHypothesis(zhtok::Hypothesis const*, bool) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209a0c (     0x4) zhtok::HypothesisLogger::logNewHypothesis(zhtok::Hypothesis const*, zhtok::Hypothesis const*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209a10 (    0xa0) zhtok::Hypothesis::init(zhtok::Word const*, zhtok::Hypothesis const*, double) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209ab0 (    0x2c) zhtok::Hypothesis::costOfExtendingToWord(unsigned int, void*) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209adc (   0x210) zhtok::Hypothesis::createDescription() const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209cec (     0x8) zhtok::InstantLogPrinter::InstantLogPrinter(__sFILE*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209cf4 (     0x8) zhtok::InstantLogPrinter::InstantLogPrinter(__sFILE*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209cfc (     0x8) zhtok::InstantLogPrinter::print(char const*, char*) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209d04 (    0x90) zhtok::Logger::getLogger() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209d94 (     0x4) zhtok::Logger::Logger() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209d98 (    0xe4) zhtok::Logger::Logger() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209e7c (    0x24) zhtok::Logger::isLoggingTypeEnabled(zhtok::Logger::LoggingType) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209ea0 (     0x8) zhtok::Logger::isLoggingTypeEnabledForDebug(zhtok::Logger::LoggingType) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209ea8 (    0x38) zhtok::Logger::areLoggingTypesEnabled(unsigned long, bool) const [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209ee0 (    0x54) zhtok::Logger::log(zhtok::Logger::LoggingType, char const*, ...) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209f34 (    0x50) zhtok::Logger::log(unsigned long, char const*, ...) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209f84 (    0x14) zhtok::Logger::flush() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x000000018e209f98 (    0x98) zhtok::Logger::logErrorMessage(char const*, ...) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
            0x000000018e20a030 (   0x5d0) __TEXT __auth_stubs
                0x000000018e20a030 (    0x10) DYLD-STUB$$CFArrayAppendValue [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a040 (    0x10) DYLD-STUB$$CFArrayCreateMutable [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a050 (    0x10) DYLD-STUB$$CFArrayGetCount [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a060 (    0x10) DYLD-STUB$$CFArrayGetValueAtIndex [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a070 (    0x10) DYLD-STUB$$CFCharacterSetGetPredefined [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a080 (    0x10) DYLD-STUB$$CFCharacterSetIsCharacterMember [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a090 (    0x10) DYLD-STUB$$CFDictionaryCreateMutable [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a0a0 (    0x10) DYLD-STUB$$CFDictionarySetValue [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a0b0 (    0x10) DYLD-STUB$$CFGetTypeID [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a0c0 (    0x10) DYLD-STUB$$CFLocaleCreate [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a0d0 (    0x10) DYLD-STUB$$CFLocaleGetIdentifier [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a0e0 (    0x10) DYLD-STUB$$CFLocaleGetValue [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a0f0 (    0x10) DYLD-STUB$$CFLog [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a100 (    0x10) DYLD-STUB$$CFRelease [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a110 (    0x10) DYLD-STUB$$CFStringAppend [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a120 (    0x10) DYLD-STUB$$CFStringAppendCString [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a130 (    0x10) DYLD-STUB$$CFStringCompare [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a140 (    0x10) DYLD-STUB$$CFStringCreateCopy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a150 (    0x10) DYLD-STUB$$CFStringCreateMutable [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a160 (    0x10) DYLD-STUB$$CFStringCreateWithCString [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a170 (    0x10) DYLD-STUB$$CFStringCreateWithFormat [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a180 (    0x10) DYLD-STUB$$CFStringCreateWithSubstring [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a190 (    0x10) DYLD-STUB$$CFStringGetCString [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a1a0 (    0x10) DYLD-STUB$$CFStringGetCharacters [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a1b0 (    0x10) DYLD-STUB$$CFStringGetLength [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a1c0 (    0x10) DYLD-STUB$$CFStringGetMaximumSizeForEncoding [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a1d0 (    0x10) DYLD-STUB$$CFStringGetTypeID [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a1e0 (    0x10) DYLD-STUB$$LMLanguageModelConditionalProbability [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a1f0 (    0x10) DYLD-STUB$$LMLanguageModelCreate [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a200 (    0x10) DYLD-STUB$$LMLanguageModelIsAppleColorEmojiCharacter [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a210 (    0x10) DYLD-STUB$$LMLanguageModelRelease [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a220 (    0x10) DYLD-STUB$$LMLexiconCreate [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a230 (    0x10) DYLD-STUB$$LMLexiconCursorFirstTokenID [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a240 (    0x10) DYLD-STUB$$LMLexiconCursorHasEntries [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a250 (    0x10) DYLD-STUB$$LMLexiconCursorTraversedLength [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a260 (    0x10) DYLD-STUB$$LMLexiconGetCursorByAdvancingWithCharacters [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a270 (    0x10) DYLD-STUB$$LMLexiconGetRootCursor [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a280 (    0x10) DYLD-STUB$$LMLexiconRelease [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a290 (    0x10) DYLD-STUB$$LMLexiconResetCursors [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a2a0 (    0x10) DYLD-STUB$$_Block_copy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a2b0 (    0x10) DYLD-STUB$$_Block_release [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a2c0 (    0x10) DYLD-STUB$$_Unwind_Resume [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a2d0 (    0x10) DYLD-STUB$$std::__1::basic_stringbuf<char, std::__1::char_traits<char>, std::__1::allocator<char>>::str() const [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a2e0 (    0x10) DYLD-STUB$$std::__1::locale::use_facet(std::__1::locale::id&) const [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a2f0 (    0x10) DYLD-STUB$$std::__1::ios_base::getloc() const [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a300 (    0x10) DYLD-STUB$$std::logic_error::logic_error(char const*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a310 (    0x10) DYLD-STUB$$std::bad_array_new_length::bad_array_new_length() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a320 (    0x10) DYLD-STUB$$std::__1::basic_ostream<char, std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_ostream<char, std::__1::char_traits<char>>&) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a330 (    0x10) DYLD-STUB$$std::__1::basic_ostream<char, std::__1::char_traits<char>>::sentry::~sentry() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a340 (    0x10) DYLD-STUB$$std::__1::basic_ostream<char, std::__1::char_traits<char>>::operator<<(unsigned int) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a350 (    0x10) DYLD-STUB$$std::__1::basic_iostream<char, std::__1::char_traits<char>>::~basic_iostream() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a360 (    0x10) DYLD-STUB$$std::__1::basic_streambuf<char, std::__1::char_traits<char>>::basic_streambuf() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a370 (    0x10) DYLD-STUB$$std::__1::basic_streambuf<char, std::__1::char_traits<char>>::~basic_streambuf() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a380 (    0x10) DYLD-STUB$$std::__1::locale::~locale() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a390 (    0x10) DYLD-STUB$$std::__1::ios_base::__set_badbit_and_consider_rethrow() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a3a0 (    0x10) DYLD-STUB$$std::__1::ios_base::init(void*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a3b0 (    0x10) DYLD-STUB$$std::__1::ios_base::clear(unsigned int) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a3c0 (    0x10) DYLD-STUB$$std::__1::basic_ios<char, std::__1::char_traits<char>>::~basic_ios() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a3d0 (    0x10) DYLD-STUB$$std::terminate() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a3e0 (    0x10) DYLD-STUB$$operator delete[](void*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a3f0 (    0x10) DYLD-STUB$$operator delete(void*) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a400 (    0x10) DYLD-STUB$$operator new[](unsigned long) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a410 (    0x10) DYLD-STUB$$operator new(unsigned long) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a420 (    0x10) DYLD-STUB$$__cxa_allocate_exception [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a430 (    0x10) DYLD-STUB$$__cxa_begin_catch [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a440 (    0x10) DYLD-STUB$$__cxa_end_catch [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a450 (    0x10) DYLD-STUB$$__cxa_free_exception [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a460 (    0x10) DYLD-STUB$$__cxa_guard_abort [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a470 (    0x10) DYLD-STUB$$__cxa_guard_acquire [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a480 (    0x10) DYLD-STUB$$__cxa_guard_release [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a490 (    0x10) DYLD-STUB$$__cxa_throw [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a4a0 (    0x10) DYLD-STUB$$__maskrune [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a4b0 (    0x10) DYLD-STUB$$__stack_chk_fail [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a4c0 (    0x10) DYLD-STUB$$backtrace [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a4d0 (    0x10) DYLD-STUB$$backtrace_symbols [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a4e0 (    0x10) DYLD-STUB$$fflush [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a4f0 (    0x10) DYLD-STUB$$fprintf [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a500 (    0x10) DYLD-STUB$$free [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a510 (    0x10) DYLD-STUB$$fwrite [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a520 (    0x10) DYLD-STUB$$getenv [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a530 (    0x10) DYLD-STUB$$malloc [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a540 (    0x10) DYLD-STUB$$memcpy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a550 (    0x10) DYLD-STUB$$memset [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a560 (    0x10) DYLD-STUB$$strlen [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a570 (    0x10) DYLD-STUB$$ubrk_close [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a580 (    0x10) DYLD-STUB$$ubrk_first [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a590 (    0x10) DYLD-STUB$$ubrk_next [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a5a0 (    0x10) DYLD-STUB$$ubrk_open [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a5b0 (    0x10) DYLD-STUB$$ubrk_setUText [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a5c0 (    0x10) DYLD-STUB$$utext_close [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a5d0 (    0x10) DYLD-STUB$$utext_openUChars [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a5e0 (    0x10) DYLD-STUB$$vfprintf [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x000000018e20a5f0 (    0x10) DYLD-STUB$$vsprintf [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
            0x000000018e20a600 (    0xb8) __TEXT __const
                0x000000018e20a610 (    0x1d) typeinfo name for zhtok::ChineseLMTokenizer [PEXT, NameNList, MangledNameNList, NList] 
                0x000000018e20a62d (    0x3b) typeinfo name for zhtok::DynamicLexiconBuilder [PEXT, NameNList, MangledNameNList, NList] 
                0x000000018e20a668 (    0x20) typeinfo name for zhtok::WordLatticeController [PEXT, NameNList, MangledNameNList, NList] 
                0x000000018e20a688 (    0x30) typeinfo name for zhtok::TokenizerLexicon [PEXT, NameNList, MangledNameNList, NList] 
            0x000000018e20a6b8 (   0x2cc) __TEXT __gcc_except_tab
                0x000000018e20a6b8 (    0x14) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x000000018e20a6cc (    0x10) GCC_except_table3 [NameNList, MangledNameNList, NList] 
                0x000000018e20a6dc (    0x10) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x000000018e20a6ec (    0x10) GCC_except_table5 [NameNList, MangledNameNList, NList] 
                0x000000018e20a6fc (    0x14) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x000000018e20a710 (    0x14) GCC_except_table6 [NameNList, MangledNameNList, NList] 
                0x000000018e20a724 (    0x10) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x000000018e20a734 (    0x14) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x000000018e20a748 (    0x1c) GCC_except_table9 [NameNList, MangledNameNList, NList] 
                0x000000018e20a764 (    0x10) GCC_except_table17 [NameNList, MangledNameNList, NList] 
                0x000000018e20a774 (    0x30) GCC_except_table1 [NameNList, MangledNameNList, NList] 
                0x000000018e20a7a4 (    0x18) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x000000018e20a7bc (    0x44) GCC_except_table5 [NameNList, MangledNameNList, NList] 
                0x000000018e20a800 (    0x18) GCC_except_table6 [NameNList, MangledNameNList, NList] 
                0x000000018e20a818 (    0x10) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x000000018e20a828 (    0x10) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x000000018e20a838 (    0x10) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x000000018e20a848 (    0x18) GCC_except_table6 [NameNList, MangledNameNList, NList] 
                0x000000018e20a860 (    0x40) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x000000018e20a8a0 (    0x18) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x000000018e20a8b8 (    0x10) GCC_except_table4 [NameNList, MangledNameNList, NList] 
                0x000000018e20a8c8 (    0x2c) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x000000018e20a8f4 (    0x10) GCC_except_table5 [NameNList, MangledNameNList, NList] 
                0x000000018e20a904 (     0xc) GCC_except_table23 [NameNList, MangledNameNList, NList] 
                0x000000018e20a910 (     0xc) GCC_except_table24 [NameNList, MangledNameNList, NList] 
                0x000000018e20a91c (     0xc) GCC_except_table25 [NameNList, MangledNameNList, NList] 
                0x000000018e20a928 (     0xc) GCC_except_table26 [NameNList, MangledNameNList, NList] 
                0x000000018e20a934 (    0x10) GCC_except_table0 [NameNList, MangledNameNList, NList] 
                0x000000018e20a944 (    0x20) GCC_except_table2 [NameNList, MangledNameNList, NList] 
                0x000000018e20a964 (    0x10) GCC_except_table3 [NameNList, MangledNameNList, NList] 
                0x000000018e20a974 (    0x10) GCC_except_table5 [NameNList, MangledNameNList, NList] 
            0x000000018e20a984 (   0x200) __TEXT __cstring
            0x000000018e20ab84 (   0x39c) __TEXT __unwind_info
            0x000000018e20af20 (    0xd8) __TEXT __eh_frame
        0x00000001d3abe360 (   0x118) __DATA_CONST SEGMENT
            0x00000001d3abe360 (    0xd8) __DATA_CONST __got
            0x00000001d3abe438 (    0x40) __DATA_CONST __const
                0x00000001d3abe438 (    0x20) __block_descriptor_tmp [NameNList, MangledNameNList, NList] 
                0x00000001d3abe458 (    0x20) __block_descriptor_tmp [NameNList, MangledNameNList, NList] 
        0x00000001dbb127c0 (   0x4b0) __AUTH_CONST SEGMENT
            0x00000001dbb127c0 (   0x100) __AUTH_CONST __cfstring
            0x00000001dbb128c0 (    0xc0) __AUTH_CONST __const
                0x00000001dbb128c0 (    0x20) vtable for zhtok::ChineseLMTokenizer [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dbb128e0 (    0x10) typeinfo for zhtok::ChineseLMTokenizer [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dbb128f0 (    0x20) vtable for zhtok::DynamicLexiconBuilder [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dbb12910 (    0x10) typeinfo for zhtok::DynamicLexiconBuilder [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dbb12920 (    0x20) vtable for zhtok::WordLatticeController [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dbb12940 (    0x10) typeinfo for zhtok::WordLatticeController [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dbb12950 (    0x20) vtable for zhtok::TokenizerLexicon [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dbb12970 (    0x10) typeinfo for zhtok::TokenizerLexicon [PEXT, NameNList, MangledNameNList, NList] 
            0x00000001dbb12980 (   0x2f0) __AUTH_CONST __auth_got
        0x00000001d5d4e8d0 (    0x10) __DATA SEGMENT
            0x00000001d5d4e8d0 (    0x10) __DATA __bss
                0x00000001d5d4e8d0 (     0x8) zhtok::Logger::getLogger()::singleton [NameNList, MangledNameNList, NList] 
                0x00000001d5d4e8d8 (     0x8) guard variable for zhtok::Logger::getLogger()::singleton [NameNList, MangledNameNList, NList] 
        0x000000023a910000 (0x37bf0000) __LINKEDIT SEGMENT
