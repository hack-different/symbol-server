Unable to find file, pid, task or signature matching: -arch=x86_64
WARNING: You currently do not have task_read_for_pid() privileges.
Unable to find file, pid, task or signature matching: -wide
WARNING: You currently do not have task_read_for_pid() privileges.
/usr/lib/swift/libswiftNaturalLanguage.dylib [arm64e, 0.028706 seconds]:
    BCEC984E-3151-37B0-8DAC-647BFB53F2EE /usr/lib/swift/libswiftNaturalLanguage.dylib [DYLIB, DYLDSHAREDCACHE, FaultedFromDiskDyldSharedCache, MMap64]  
        0x00000001cabbd000 (  0x7ff6) __TEXT SEGMENT
            0x00000001cabbd000 (  0x1350) MACH_HEADER
            0x00000001cabbe350 (  0x5820) __TEXT __text
                0x00000001cabbe350 (    0xf4) NLTokenizer.tokenRange(at:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe444 (    0x54) lazy protocol witness table accessor for type String and conformance String [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe498 (   0x178) NLTokenizer.tokenRange(for:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe610 (    0x44) __swift_instantiateConcreteTypeFromMangledName [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe654 (    0x5c) lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A> [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe6b0 (    0x48) __swift_instantiateConcreteTypeFromMangledNameAbstract [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe6f8 (   0x210) NLTokenizer.enumerateTokens(in:using:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe908 (    0x38) (null) [FUNC, FunctionStarts] 
                0x00000001cabbe940 (     0x4) partial apply for closure #1 in NLTokenizer.enumerateTokens(in:using:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe944 (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabbe954 (    0x28) partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @unowned NLTokenizerAttributes, @unowned UnsafeMutablePointer<ObjCBool>) -> () [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe97c (    0x38) thunk for @escaping @callee_guaranteed (@unowned _NSRange, @unowned NLTokenizerAttributes, @unowned UnsafeMutablePointer<ObjCBool>) -> () [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe9b4 (    0x10) block_copy_helper [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe9c4 (     0x8) block_destroy_helper [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbe9cc (   0x22c) NLTokenizer.tokens(for:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbebf8 (    0xb4) closure #1 in NLTokenizer.tokens(for:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbecac (     0x8) partial apply for closure #1 in NLTokenizer.tokens(for:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbecb4 (     0x4) closure #1 in NLTokenizer.enumerateTokens(in:using:)partial apply [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbecb8 (    0x54) partial apply for closure #1 in NLTokenizer.enumerateTokens(in:using:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbed0c (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabbed1c (    0x14) type metadata accessor for NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbed30 (    0x14) type metadata accessor for NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbed44 (     0xc) __swift_memcpy16_8 [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbed50 (     0x4) __swift_noop_void_return [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbed54 (    0x20) getEnumTagSinglePayload for _NSRange [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbed74 (    0x28) storeEnumTagSinglePayload for _NSRange [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbed9c (    0x14) type metadata accessor for _NSRange [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbedb0 (    0x14) type metadata accessor for NLTokenizerAttributes [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbedc4 (    0x48) type metadata accessor for NLLanguage [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee0c (    0x18) protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee24 (     0x4) protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee28 (     0x4) protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee2c (     0x4) protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee30 (    0x18) protocol witness for Hashable.hashValue.getter in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee48 (     0x4) protocol witness for Hashable.hash(into:) in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee4c (     0x4) protocol witness for Hashable._rawHashValue(seed:) in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee50 (    0x18) protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee68 (     0x4) protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbee6c (    0x78) protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbeee4 (     0x4) protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbeee8 (    0x80) protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbef68 (    0x18) protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbef80 (    0x44) protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbefc4 (    0x18) protocol witness for Hashable.hashValue.getter in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbefdc (    0x44) protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf020 (     0x4) protocol witness for Hashable.hash(into:) in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf024 (    0x54) protocol witness for Hashable.hash(into:) in conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf078 (     0x4) protocol witness for Hashable._rawHashValue(seed:) in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf07c (    0x74) protocol witness for Hashable._rawHashValue(seed:) in conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf0f0 (     0x4) protocol witness for static Equatable.== infix(_:_:) in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf0f4 (     0x4) protocol witness for static Equatable.== infix(_:_:) in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf0f8 (    0x8c) protocol witness for static Equatable.== infix(_:_:) in conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf184 (     0x4) protocol witness for RawRepresentable.init(rawValue:) in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf188 (     0x4) protocol witness for RawRepresentable.rawValue.getter in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf18c (    0xbc) protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf248 (    0x48) base witness table accessor for RawRepresentable in NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf290 (    0x48) base witness table accessor for _HasCustomAnyHashableRepresentation in NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf2d8 (    0x48) lazy protocol witness table accessor for type NLTag and conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf320 (    0x18) protocol witness for RawRepresentable.init(rawValue:) in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf338 (    0x48) protocol witness for RawRepresentable.init(rawValue:) in conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf380 (     0x4) protocol witness for RawRepresentable.rawValue.getter in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf384 (    0x2c) protocol witness for RawRepresentable.rawValue.getter in conformance NLTag [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf3b0 (    0xbc) protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf46c (    0x48) base witness table accessor for RawRepresentable in NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf4b4 (    0x48) base witness table accessor for _HasCustomAnyHashableRepresentation in NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf4fc (    0x48) base witness table accessor for Equatable in NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf544 (    0x48) base witness table accessor for Equatable in NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf58c (     0x4) block_copy_helper.12 [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf590 (     0x4) (null) [FUNC, FunctionStarts] 
                0x00000001cabbf594 (     0x4) thunk for @callee_guaranteed (@unowned _NSRange, @unowned NLTokenizerAttributes, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf598 (     0x4) block_destroy_helper.13 [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf59c (   0x27c) NLContextualEmbeddingResult.tokenVector(at:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf818 (    0x40) type metadata accessor for NSNumber [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbf858 (   0x20c) NLContextualEmbeddingResult.enumerateTokenVectors(in:using:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfa64 (   0x1ec) closure #1 in NLContextualEmbeddingResult.enumerateTokenVectors(in:using:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfc50 (    0x80) thunk for @escaping @callee_guaranteed (@guaranteed [NSNumber], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> () [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfcd0 (    0x20) specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfcf0 (    0x38) (null) [FUNC, FunctionStarts] 
                0x00000001cabbfd28 (     0xc) partial apply for closure #1 in NLContextualEmbeddingResult.enumerateTokenVectors(in:using:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfd34 (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabbfd44 (    0x28) partial apply for thunk for @callee_guaranteed (@guaranteed [NSNumber], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> () [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfd6c (    0x10) block_copy_helper [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfd7c (     0x8) block_destroy_helper [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfd84 (    0x20) specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfda4 (    0x20) specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfdc4 (   0x100) specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabbfec4 (   0x13c) specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0000 (   0x128) specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0128 (     0x4) _swift_stdlib_malloc_size [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc012c (   0x23c) specialized Collection.map<A>(_:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0368 (   0x100) NLTagger.tokenRange(at:unit:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0468 (   0x188) NLTagger.tokenRange(for:unit:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc05f0 (   0x134) NLTagger.tag(at:unit:scheme:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0724 (   0x208) NLTagger.tagHypotheses(at:unit:scheme:maximumCount:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc092c (    0x58) lazy protocol witness table accessor for type NLTag and conformance NLTag [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0984 (   0x234) NLTagger.enumerateTags(in:unit:scheme:options:using:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0bb8 (    0x80) thunk for @escaping @callee_guaranteed (@guaranteed NLTag?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> () [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0c38 (   0x258) NLTagger.tags(in:unit:scheme:options:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0e90 (    0xcc) closure #1 in NLTagger.tags(in:unit:scheme:options:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0f5c (    0x20) NLTagger.setLanguage(_:range:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0f7c (    0x20) NLTagger.setOrthography(_:range:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc0f9c (   0x128) NLTagger.setLanguage(_:range:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc10c4 (   0x38c) specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1450 (    0x38) (null) [FUNC, FunctionStarts] 
                0x00000001cabc1488 (     0x4) partial apply for closure #1 in NLTagger.enumerateTags(in:unit:scheme:options:using:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc148c (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabc149c (    0x28) partial apply for thunk for @callee_guaranteed (@guaranteed NLTag?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> () [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc14c4 (    0x10) block_copy_helper [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc14d4 (     0x8) block_destroy_helper [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc14dc (     0x8) partial apply for closure #1 in NLTagger.tags(in:unit:scheme:options:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc14e4 (     0x4) closure #1 in NLTagger.enumerateTags(in:unit:scheme:options:using:)partial apply [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc14e8 (    0x70) partial apply for closure #1 in NLTagger.enumerateTags(in:unit:scheme:options:using:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1558 (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabc1568 (    0x78) specialized __RawDictionaryStorage.find<A>(_:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc15e0 (   0x1b0) specialized _NativeDictionary.copy() [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1790 (    0xe4) specialized __RawDictionaryStorage.find<A>(_:hashValue:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1874 (   0x310) specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1b84 (    0x88) specialized Dictionary.startIndex.getter [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1c0c (     0x4) block_copy_helper.12 [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1c10 (     0x4) (null) [FUNC, FunctionStarts] 
                0x00000001cabc1c14 (     0x4) thunk for @callee_guaranteed (@guaranteed NLTag?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1c18 (     0x4) block_destroy_helper.13 [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1c1c (   0x268) NLModel.predictedLabelHypotheses(for:maximumCount:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc1e84 (   0x330) NLModel.predictedLabelHypotheses(forTokens:maximumCount:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc21b4 (    0x8c) NLEmbedding.distance(between:and:distanceType:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2240 (   0x184) NLEmbedding.enumerateNeighbors(for:maximumCount:distanceType:using:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc23c4 (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabc23d4 (     0x4) partial apply for closure #1 in NLEmbedding.enumerateNeighbors(for:maximumCount:distanceType:using:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc23d8 (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabc23e8 (    0x28) partial apply for thunk for @callee_guaranteed (@guaranteed String, @unowned Double, @unowned UnsafeMutablePointer<ObjCBool>) -> () [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2410 (    0x68) thunk for @escaping @callee_guaranteed (@guaranteed String, @unowned Double, @unowned UnsafeMutablePointer<ObjCBool>) -> () [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2478 (    0x10) block_copy_helper [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2488 (     0x8) block_destroy_helper [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2490 (   0x1a8) NLEmbedding.neighbors(for:maximumCount:distanceType:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2638 (    0x20) partial apply for closure #1 in NLEmbedding.neighbors(for:maximumCount:distanceType:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2658 (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabc2668 (     0x4) closure #1 in NLEmbedding.enumerateNeighbors(for:maximumCount:distanceType:using:)partial apply [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc266c (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabc267c (   0x248) NLEmbedding.enumerateNeighbors(for:maximumCount:distanceType:using:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc28c4 (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabc28d4 (     0x4) partial apply for closure #2 in NLEmbedding.enumerateNeighbors(for:maximumCount:distanceType:using:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc28d8 (    0x38) partial apply for closure #1 in NLEmbedding.enumerateNeighbors(for:maximumCount:distanceType:using:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2910 (    0x10) (null) [FUNC, FunctionStarts] 
                0x00000001cabc2920 (    0x50) NLEmbedding.neighbors(for:maximumCount:distanceType:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2970 (    0xd0) closure #1 in NLEmbedding.neighbors(for:maximumCount:distanceType:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2a40 (   0x1bc) NLEmbedding.vector(for:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2bfc (   0x3a0) static NLEmbedding.write(_:language:revision:to:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc2f9c (   0x100) specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc309c (   0x140) specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc31dc (   0x140) specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:) [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc331c (     0x4) _swift_stdlib_malloc_size [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3320 (     0x4) block_copy_helper.12 [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3324 (     0x4) block_copy_helper.22 [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3328 (     0x4) thunk for @callee_guaranteed (@guaranteed String, @unowned Double, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc332c (     0x4) thunk for @callee_guaranteed (@guaranteed String, @unowned Double, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3330 (     0x4) partial apply for closure #1 in NLEmbedding.neighbors(for:maximumCount:distanceType:) [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3334 (     0x4) block_destroy_helper.13 [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3338 (     0x4) block_destroy_helper.23 [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc333c (   0x234) NLLanguageRecognizer.languageHints.getter [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3570 (    0x58) lazy protocol witness table accessor for type NLLanguage and conformance NLLanguage [FUNC, PEXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc35c8 (   0x278) NLLanguageRecognizer.languageHints.setter [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3840 (    0x48) NLLanguageRecognizer.languageHints.modify [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3888 (    0x58) NLLanguageRecognizer.languageHints.modify [FUNC, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc38e0 (   0x238) NLLanguageRecognizer.languageHypotheses(withMaximum:) [FUNC, EXT, NameNList, MangledNameNList, Merged, NList, FunctionStarts] 
                0x00000001cabc3b18 (    0x2c) (null) [FUNC, FunctionStarts] 
                0x00000001cabc3b44 (    0x2c) (null) [FUNC, FunctionStarts] 
            0x00000001cabc3b70 (   0x470) __TEXT __auth_stubs
                0x00000001cabc3b70 (    0x10) DYLD-STUB$$NSNotFound.getter [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3b80 (    0x10) DYLD-STUB$$_convertNSErrorToError(_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3b90 (    0x10) DYLD-STUB$$URL._bridgeToObjectiveC() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3ba0 (    0x10) DYLD-STUB$$Dictionary._bridgeToObjectiveC() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3bb0 (    0x10) DYLD-STUB$$static Dictionary._unconditionallyBridgeFromObjectiveC(_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3bc0 (    0x10) DYLD-STUB$$String._bridgeToObjectiveC() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3bd0 (    0x10) DYLD-STUB$$static String._forceBridgeFromObjectiveC(_:result:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3be0 (    0x10) DYLD-STUB$$static String._conditionallyBridgeFromObjectiveC(_:result:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3bf0 (    0x10) DYLD-STUB$$static String._unconditionallyBridgeFromObjectiveC(_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c00 (    0x10) DYLD-STUB$$String.hash(into:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c10 (    0x10) DYLD-STUB$$String.Index.utf16Offset<A>(in:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c20 (    0x10) DYLD-STUB$$String.append(_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c30 (    0x10) DYLD-STUB$$Array._bridgeToObjectiveC() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c40 (    0x10) DYLD-STUB$$static Array._unconditionallyBridgeFromObjectiveC(_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c50 (    0x10) DYLD-STUB$$Range<>.init(_:in:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c60 (    0x10) DYLD-STUB$$_NSRange.init<A, B>(_:in:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c70 (    0x10) DYLD-STUB$$_StringGuts.grow(_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c80 (    0x10) DYLD-STUB$$specialized _ArrayBuffer._getElementSlowPath(_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3c90 (    0x10) DYLD-STUB$$specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3ca0 (    0x10) DYLD-STUB$$specialized ContiguousArray._endMutation() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3cb0 (    0x10) DYLD-STUB$$specialized ContiguousArray.reserveCapacity(_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3cc0 (    0x10) DYLD-STUB$$specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3cd0 (    0x10) DYLD-STUB$$specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3ce0 (    0x10) DYLD-STUB$$_print_unlocked<A, B>(_:_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3cf0 (    0x10) DYLD-STUB$$_assertionFailure(_:_:file:line:flags:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d00 (    0x10) DYLD-STUB$$_CocoaArrayWrapper.endIndex.getter [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d10 (    0x10) DYLD-STUB$$static _DictionaryStorage.copy(original:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d20 (    0x10) DYLD-STUB$$static _DictionaryStorage.resize(original:capacity:move:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d30 (    0x10) DYLD-STUB$$static _DictionaryStorage.allocate(capacity:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d40 (    0x10) DYLD-STUB$$_SwiftNewtypeWrapper<>._toCustomAnyHashable() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d50 (    0x10) DYLD-STUB$$_stringCompareWithSmolCheck(_:_:expecting:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d60 (    0x10) DYLD-STUB$$KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d70 (    0x10) DYLD-STUB$$Hasher.init(_seed:) [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d80 (    0x10) DYLD-STUB$$Hasher._finalize() [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3d90 (    0x10) DYLD-STUB$$_Block_copy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3da0 (    0x10) DYLD-STUB$$_Block_release [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3db0 (    0x10) DYLD-STUB$$__stack_chk_fail [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3dc0 (    0x10) DYLD-STUB$$bzero [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3dd0 (    0x10) DYLD-STUB$$malloc_size [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3de0 (    0x10) DYLD-STUB$$memcpy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3df0 (    0x10) DYLD-STUB$$memmove [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e00 (    0x10) DYLD-STUB$$objc_allocWithZone [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e10 (    0x10) DYLD-STUB$$objc_msgSend [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e20 (    0x10) DYLD-STUB$$objc_opt_self [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e30 (    0x10) DYLD-STUB$$objc_release [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e40 (    0x10) DYLD-STUB$$objc_retain [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e50 (    0x10) DYLD-STUB$$objc_retainAutoreleasedReturnValue [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e60 (    0x10) DYLD-STUB$$swift_allocError [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e70 (    0x10) DYLD-STUB$$swift_allocObject [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e80 (    0x10) DYLD-STUB$$swift_arrayInitWithCopy [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3e90 (    0x10) DYLD-STUB$$swift_bridgeObjectRelease [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3ea0 (    0x10) DYLD-STUB$$swift_bridgeObjectRelease_n [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3eb0 (    0x10) DYLD-STUB$$swift_bridgeObjectRetain [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3ec0 (    0x10) DYLD-STUB$$swift_deallocObject [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3ed0 (    0x10) DYLD-STUB$$swift_dynamicCast [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3ee0 (    0x10) DYLD-STUB$$swift_errorRelease [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3ef0 (    0x10) DYLD-STUB$$swift_errorRetain [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f00 (    0x10) DYLD-STUB$$swift_getForeignTypeMetadata [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f10 (    0x10) DYLD-STUB$$swift_getObjCClassFromMetadata [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f20 (    0x10) DYLD-STUB$$swift_getObjCClassMetadata [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f30 (    0x10) DYLD-STUB$$swift_getTypeByMangledNameInContext2 [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f40 (    0x10) DYLD-STUB$$swift_getTypeByMangledNameInContextInMetadataState2 [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f50 (    0x10) DYLD-STUB$$swift_getWitnessTable [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f60 (    0x10) DYLD-STUB$$swift_isEscapingClosureAtFileLocation [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f70 (    0x10) DYLD-STUB$$swift_isUniquelyReferenced_nonNull_native [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f80 (    0x10) DYLD-STUB$$swift_release [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3f90 (    0x10) DYLD-STUB$$swift_retain [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3fa0 (    0x10) DYLD-STUB$$swift_slowAlloc [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3fb0 (    0x10) DYLD-STUB$$swift_slowDealloc [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3fc0 (    0x10) DYLD-STUB$$swift_unexpectedError [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
                0x00000001cabc3fd0 (    0x10) DYLD-STUB$$swift_willThrow [DYLD-STUB, LENGTH, NameNList, MangledNameNList, NList] 
            0x00000001cabc3fe0 (   0x326) __TEXT __const
                0x00000001cabc4054 (    0x2c) protocol conformance descriptor for NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4080 (    0x3c) protocol conformance descriptor for NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc40bc (    0x34) protocol conformance descriptor for NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc40f0 (    0x2c) protocol conformance descriptor for NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc411c (    0x4c) protocol conformance descriptor for NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4168 (    0x2c) protocol conformance descriptor for NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4194 (    0x3c) protocol conformance descriptor for NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc41d0 (    0x34) protocol conformance descriptor for NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4204 (    0x2c) protocol conformance descriptor for NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4230 (    0x4c) protocol conformance descriptor for NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc427c (    0x44) protocol conformance descriptor for NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc42c0 (    0x44) protocol conformance descriptor for NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4304 (     0x2) __swift_reflection_version [PEXT, NameNList, MangledNameNList, NList] 
            0x00000001cabc4306 (   0x24d) __TEXT __swift5_typeref
                0x00000001cabc4306 (     0xa) symbolic Sny_____G SS5IndexV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4310 (     0x4) symbolic SS [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4314 (    0x18) symbolic Sny_____G_____SbIgyyd_ SS5IndexV So21NLTokenizerAttributesV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc432c (    0x1a) symbolic __________Spy_____GIgyyy_ So8_NSRangeV So21NLTokenizerAttributesV 10ObjectiveC8ObjCBoolV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4346 (     0x6) symbolic _____ So10NLLanguagea [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc434c (     0xe) symbolic So8NSStringC [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc435a (     0x6) symbolic _____ So5NLTaga [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4360 (     0x6) symbolic _____ So8_NSRangeV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4366 (     0x4) symbolic Si [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc436a (     0x6) symbolic _____ So21NLTokenizerAttributesV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4370 (     0x4) symbolic Su [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4374 (     0x6) symbolic $sSY [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc437a (     0x8) associated conformance So5NLTagas20_SwiftNewtypeWrapperSCSY [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4382 (     0x8) associated conformance So5NLTagas20_SwiftNewtypeWrapperSCs35_HasCustomAnyHashableRepresentation [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc438a (    0x1c) symbolic $ss21_ObjectiveCBridgeableP [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc43a6 (     0x8) associated conformance So10NLLanguageas20_SwiftNewtypeWrapperSCSY [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc43ae (     0x8) associated conformance So10NLLanguageas20_SwiftNewtypeWrapperSCs35_HasCustomAnyHashableRepresentation [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc43b6 (     0x8) associated conformance So10NLLanguageaSHSCSQ [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc43be (     0x8) associated conformance So5NLTagaSHSCSQ [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc43c6 (    0x18) symbolic SaySdGSny_____GSbIggyd_ SS5IndexV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc43de (    0x26) symbolic SaySo8NSNumberCG_____Spy_____GIggyy_ So8_NSRangeV 10ObjectiveC8ObjCBoolV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4404 (    0x10) symbolic _____ySDySSSdGG s23_ContiguousArrayStorageC [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4414 (     0xa) symbolic SDySSSdG [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc441e (     0xe) symbolic _____ySS_SdtG s23_ContiguousArrayStorageC [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc442c (     0x8) symbolic SS_Sdt [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4434 (     0xa) symbolic _____ySdG s23_ContiguousArrayStorageC [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc443e (     0xc) symbolic _____ySSSdG s18_DictionaryStorageC [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc444a (    0x1a) symbolic _____SgSny_____GSbIggyd_ So5NLTaga SS5IndexV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4464 (    0x1c) symbolic _____Sg_____Spy_____GIggyy_ So5NLTaga So8_NSRangeV 10ObjectiveC8ObjCBoolV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4480 (     0x8) symbolic ______p s5ErrorP [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4488 (    0x14) symbolic SDySSSo8NSNumberCG [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc449c (     0xe) symbolic SSSdSbIggyd_ [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc44aa (    0x14) symbolic SSSdSpy_____GIggyy_ 10ObjectiveC8ObjCBoolV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc44be (    0x1a) symbolic _____ySSSaySo8NSNumberCGG s18_DictionaryStorageC [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc44d8 (    0x12) symbolic SaySo8NSNumberCG [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc44ea (    0x1a) symbolic _____y_____Sg_Sny_____GtG s23_ContiguousArrayStorageC So5NLTaga SS5IndexV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4504 (    0x14) symbolic _____Sg_Sny_____Gt So5NLTaga SS5IndexV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4518 (    0x12) symbolic _____ySny_____GG s23_ContiguousArrayStorageC SS5IndexV [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc452a (    0x10) symbolic _____y_____SdG s18_DictionaryStorageC So10NLLanguagea [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc453a (    0x19) symbolic _____y_____So8NSNumberCG s18_DictionaryStorageC So10NLLanguagea [PEXT, NameNList, MangledNameNList, NList] 
            0x00000001cabc4554 (   0x114) __TEXT __swift5_capture
            0x00000001cabc4670 (   0x10a) __TEXT __cstring
            0x00000001cabc477c (    0x98) __TEXT __constg_swiftt
                0x00000001cabc477c (     0xc) module descriptor  [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4788 (    0x20) nominal type descriptor for NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc47a8 (    0x20) nominal type descriptor for NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc47c8 (    0x20) nominal type descriptor for _NSRange [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc47e8 (    0x20) nominal type descriptor for NLTokenizerAttributes [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4808 (     0xc) module descriptor  [PEXT, NameNList, MangledNameNList, NList] 
            0x00000001cabc4814 (    0x50) __TEXT __swift5_builtin
                0x00000001cabc4814 (    0x14) reflection metadata builtin descriptor NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4828 (    0x14) reflection metadata builtin descriptor NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc483c (    0x14) reflection metadata builtin descriptor _NSRange [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4850 (    0x14) reflection metadata builtin descriptor NLTokenizerAttributes [PEXT, NameNList, MangledNameNList, NList] 
            0x00000001cabc4864 (    0x3c) __TEXT __swift5_reflstr
            0x00000001cabc48a0 (    0x7c) __TEXT __swift5_fieldmd
                0x00000001cabc48a0 (    0x1c) reflection metadata field descriptor NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc48bc (    0x1c) reflection metadata field descriptor NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc48d8 (    0x28) reflection metadata field descriptor _NSRange [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4900 (    0x1c) reflection metadata field descriptor NLTokenizerAttributes [PEXT, NameNList, MangledNameNList, NList] 
            0x00000001cabc491c (    0x60) __TEXT __swift5_assocty
                0x00000001cabc491c (    0x18) reflection metadata associated type descriptor NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4934 (    0x18) reflection metadata associated type descriptor NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc494c (    0x18) reflection metadata associated type descriptor NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001cabc4964 (    0x18) reflection metadata associated type descriptor NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
            0x00000001cabc497c (    0x30) __TEXT __swift5_proto
            0x00000001cabc49ac (    0x10) __TEXT __swift5_types
            0x00000001cabc49bc (   0x218) __TEXT __unwind_info
            0x00000001cabc4bd8 (    0xe0) __TEXT __eh_frame
            0x00000001cabc4cb8 (   0x33e) __TEXT __objc_methname
        0x00000001d3b762b8 (   0x190) __DATA_CONST SEGMENT
            0x00000001d3b762b8 (    0x78) __DATA_CONST __got
            0x00000001d3b76330 (    0x48) __DATA_CONST __const
                0x00000001d3b76330 (     0x8) _swift_FORCE_LOAD_$_swiftFoundation_$_NaturalLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d3b76338 (     0x8) _swift_FORCE_LOAD_$_swiftObjectiveC_$_NaturalLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d3b76340 (     0x8) _swift_FORCE_LOAD_$_swiftDarwin_$_NaturalLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d3b76348 (     0x8) _swift_FORCE_LOAD_$_swiftCoreFoundation_$_NaturalLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d3b76350 (     0x8) _swift_FORCE_LOAD_$_swiftDispatch_$_NaturalLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d3b76358 (     0x8) _swift_FORCE_LOAD_$_swiftXPC_$_NaturalLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d3b76360 (     0x8) _swift_FORCE_LOAD_$_swiftIOKit_$_NaturalLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d3b76368 (    0x10) property descriptor for NLLanguageRecognizer.languageHints [EXT, NameNList, MangledNameNList, NList] 
            0x00000001d3b76378 (     0x8) __DATA_CONST __objc_imageinfo
            0x00000001d3b76380 (    0xc8) __DATA_CONST __objc_selrefs
        0x00000001dfafe400 (   0x840) __AUTH_CONST SEGMENT
            0x00000001dfafe400 (   0x608) __AUTH_CONST __const
                0x00000001dfafe460 (    0x78) block_descriptor [NameNList, MangledNameNList, NList] 
                0x00000001dfafe4d8 (    0x28) block_descriptor.14 [NameNList, MangledNameNList, NList] 
                0x00000001dfafe500 (    0x28) full type metadata for NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dfafe528 (    0x28) full type metadata for NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dfafe550 (    0x58) value witness table for _NSRange [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dfafe5a8 (    0x28) full type metadata for _NSRange [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dfafe5d0 (   0x140) full type metadata for NLTokenizerAttributes [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001dfafe710 (    0xa8) block_descriptor [NameNList, MangledNameNList, NList] 
                0x00000001dfafe7b8 (    0x78) block_descriptor [NameNList, MangledNameNList, NList] 
                0x00000001dfafe830 (    0x90) block_descriptor.14 [NameNList, MangledNameNList, NList] 
                0x00000001dfafe8c0 (    0x78) block_descriptor [NameNList, MangledNameNList, NList] 
                0x00000001dfafe938 (    0x78) block_descriptor.14 [NameNList, MangledNameNList, NList] 
                0x00000001dfafe9b0 (    0x58) block_descriptor.24 [NameNList, MangledNameNList, NList] 
            0x00000001dfafea08 (   0x238) __AUTH_CONST __auth_got
        0x00000001d69e58a0 (   0x711) __DATA SEGMENT
            0x00000001d69e58a0 (     0x8) __DATA __objc_classrefs
            0x00000001d69e58a8 (   0x108) __DATA __data
                0x00000001d69e58a8 (     0x8) lazy protocol witness table cache variable for type String and conformance String [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58b0 (     0x8) demangling cache variable for type metadata for Range<String.Index> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58b8 (     0x8) lazy protocol witness table cache variable for type Range<String.Index> and conformance Range<A> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58c0 (     0x8) lazy cache variable for type metadata for NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58c8 (     0x8) lazy cache variable for type metadata for NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58d0 (     0x8) lazy cache variable for type metadata for _NSRange [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58d8 (     0x8) lazy cache variable for type metadata for NLTokenizerAttributes [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58e0 (     0x8) lazy protocol witness table cache variable for type NLTag and conformance NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58e8 (     0x8) lazy protocol witness table cache variable for type NLTag and conformance NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58f0 (     0x8) lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e58f8 (     0x8) lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5900 (     0x8) lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5908 (     0x8) lazy protocol witness table cache variable for type NLTag and conformance NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5910 (     0x8) lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5918 (     0x8) lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5920 (     0x8) lazy protocol witness table cache variable for type NLTag and conformance NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5928 (     0x8) lazy protocol witness table cache variable for type NLTag and conformance NLTag [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5930 (     0x8) lazy cache variable for type metadata for NSNumber [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5938 (     0x8) demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Double]> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5940 (     0x8) demangling cache variable for type metadata for [String : Double] [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5948 (     0x8) demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Double)> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5950 (     0x8) demangling cache variable for type metadata for (String, Double) [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5958 (     0x8) demangling cache variable for type metadata for _ContiguousArrayStorage<Double> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5960 (     0x8) demangling cache variable for type metadata for _DictionaryStorage<String, Double> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5968 (     0x8) demangling cache variable for type metadata for Error [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5970 (     0x8) demangling cache variable for type metadata for [String : NSNumber] [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5978 (     0x8) demangling cache variable for type metadata for _DictionaryStorage<String, [NSNumber]> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5980 (     0x8) demangling cache variable for type metadata for [NSNumber] [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5988 (     0x8) demangling cache variable for type metadata for _ContiguousArrayStorage<(NLTag?, Range<String.Index>)> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5990 (     0x8) demangling cache variable for type metadata for (NLTag?, Range<String.Index>) [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e5998 (     0x8) demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e59a0 (     0x8) demangling cache variable for type metadata for _DictionaryStorage<NLLanguage, Double> [PEXT, NameNList, MangledNameNList, NList] 
                0x00000001d69e59a8 (     0x8) demangling cache variable for type metadata for _DictionaryStorage<NLLanguage, NSNumber> [PEXT, NameNList, MangledNameNList, NList] 
            0x00000001d69e59b0 (   0x600) __DATA __bss
                0x00000001d69e59b0 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLTag [NameNList, MangledNameNList, NList] 
                0x00000001d69e5a30 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLTag [NameNList, MangledNameNList, NList] 
                0x00000001d69e5ab0 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLTag [NameNList, MangledNameNList, NList] 
                0x00000001d69e5b30 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLTag [NameNList, MangledNameNList, NList] 
                0x00000001d69e5bb0 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLTag [NameNList, MangledNameNList, NList] 
                0x00000001d69e5c30 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLLanguage [NameNList, MangledNameNList, NList] 
                0x00000001d69e5cb0 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLLanguage [NameNList, MangledNameNList, NList] 
                0x00000001d69e5d30 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLLanguage [NameNList, MangledNameNList, NList] 
                0x00000001d69e5db0 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLLanguage [NameNList, MangledNameNList, NList] 
                0x00000001d69e5e30 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLLanguage [NameNList, MangledNameNList, NList] 
                0x00000001d69e5eb0 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLLanguage [NameNList, MangledNameNList, NList] 
                0x00000001d69e5f30 (    0x80) metadata instantiation cache for protocol conformance descriptor for NLTag [NameNList, MangledNameNList, NList] 
            0x00000001d69e5fb0 (     0x1) __DATA __common
                0x00000001d69e5fb0 (     0x1) _swift_FORCE_LOAD_$_swiftNaturalLanguage [EXT, NameNList, MangledNameNList, NList] 
        0x000000023a910000 (0x37bf0000) __LINKEDIT SEGMENT
